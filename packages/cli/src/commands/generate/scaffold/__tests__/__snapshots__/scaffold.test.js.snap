// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`in javascript (default) mode creates a edit page 1`] = `
"import EditPostCell from 'src/components/Post/EditPostCell'

const EditPostPage = ({ id }) => {
  return <EditPostCell id={id} />
}

export default EditPostPage
"
`;

exports[`in javascript (default) mode creates a form component 1`] = `
"import {
  Form,
  FormError,
  FieldError,
  Label,
  TextField,
  CheckboxField,
  NumberField,
  DatetimeLocalField,
  TextAreaField,
  Submit,
} from '@redwoodjs/forms'

const formatDatetime = (value) => {
  if (value) {
    return value.replace(/:\\\\d{2}\\\\.\\\\d{3}\\\\w/, '')
  }
}

const PostForm = (props) => {
  const onSubmit = (data) => {
    props.onSave(data, props?.post?.id)
  }

  return (
    <div className=\\"rw-form-wrapper\\">
      <Form onSubmit={onSubmit} error={props.error}>
        <FormError
          error={props.error}
          wrapperClassName=\\"rw-form-error-wrapper\\"
          titleClassName=\\"rw-form-error-title\\"
          listClassName=\\"rw-form-error-list\\"
        />

        <Label
          name=\\"title\\"
          className=\\"rw-label\\"
          errorClassName=\\"rw-label rw-label-error\\"
        >
          Title
        </Label>
        <TextField
          name=\\"title\\"
          defaultValue={props.post?.title}
          className=\\"rw-input\\"
          errorClassName=\\"rw-input rw-input-error\\"
          validation={{ required: true }}
        />

        <FieldError name=\\"title\\" className=\\"rw-field-error\\" />

        <Label
          name=\\"slug\\"
          className=\\"rw-label\\"
          errorClassName=\\"rw-label rw-label-error\\"
        >
          Slug
        </Label>
        <TextField
          name=\\"slug\\"
          defaultValue={props.post?.slug}
          className=\\"rw-input\\"
          errorClassName=\\"rw-input rw-input-error\\"
          validation={{ required: true }}
        />

        <FieldError name=\\"slug\\" className=\\"rw-field-error\\" />

        <Label
          name=\\"author\\"
          className=\\"rw-label\\"
          errorClassName=\\"rw-label rw-label-error\\"
        >
          Author
        </Label>
        <TextField
          name=\\"author\\"
          defaultValue={props.post?.author}
          className=\\"rw-input\\"
          errorClassName=\\"rw-input rw-input-error\\"
          validation={{ required: true }}
        />

        <FieldError name=\\"author\\" className=\\"rw-field-error\\" />

        <Label
          name=\\"body\\"
          className=\\"rw-label\\"
          errorClassName=\\"rw-label rw-label-error\\"
        >
          Body
        </Label>
        <TextField
          name=\\"body\\"
          defaultValue={props.post?.body}
          className=\\"rw-input\\"
          errorClassName=\\"rw-input rw-input-error\\"
          validation={{ required: true }}
        />

        <FieldError name=\\"body\\" className=\\"rw-field-error\\" />

        <Label
          name=\\"image\\"
          className=\\"rw-label\\"
          errorClassName=\\"rw-label rw-label-error\\"
        >
          Image
        </Label>
        <TextField
          name=\\"image\\"
          defaultValue={props.post?.image}
          className=\\"rw-input\\"
          errorClassName=\\"rw-input rw-input-error\\"
          validation={{ required: true }}
        />

        <FieldError name=\\"image\\" className=\\"rw-field-error\\" />

        <Label
          name=\\"isPinned\\"
          className=\\"rw-label\\"
          errorClassName=\\"rw-label rw-label-error\\"
        >
          Is pinned
        </Label>
        <CheckboxField
          name=\\"isPinned\\"
          defaultChecked={props.post?.isPinned}
          className=\\"rw-input\\"
          errorClassName=\\"rw-input rw-input-error\\"
        />

        <FieldError name=\\"isPinned\\" className=\\"rw-field-error\\" />

        <Label
          name=\\"readTime\\"
          className=\\"rw-label\\"
          errorClassName=\\"rw-label rw-label-error\\"
        >
          Read time
        </Label>
        <NumberField
          name=\\"readTime\\"
          defaultValue={props.post?.readTime}
          className=\\"rw-input\\"
          errorClassName=\\"rw-input rw-input-error\\"
          validation={{ required: true }}
        />

        <FieldError name=\\"readTime\\" className=\\"rw-field-error\\" />

        <Label
          name=\\"rating\\"
          className=\\"rw-label\\"
          errorClassName=\\"rw-label rw-label-error\\"
        >
          Rating
        </Label>
        <TextField
          name=\\"rating\\"
          defaultValue={props.post?.rating}
          className=\\"rw-input\\"
          errorClassName=\\"rw-input rw-input-error\\"
          validation={{ required: true }}
          transformValue=\\"Float\\"
        />

        <FieldError name=\\"rating\\" className=\\"rw-field-error\\" />

        <Label
          name=\\"postedAt\\"
          className=\\"rw-label\\"
          errorClassName=\\"rw-label rw-label-error\\"
        >
          Posted at
        </Label>
        <DatetimeLocalField
          name=\\"postedAt\\"
          defaultValue={formatDatetime(props.post?.postedAt)}
          className=\\"rw-input\\"
          errorClassName=\\"rw-input rw-input-error\\"
          validation={{ required: true }}
        />

        <FieldError name=\\"postedAt\\" className=\\"rw-field-error\\" />

        <Label
          name=\\"metadata\\"
          className=\\"rw-label\\"
          errorClassName=\\"rw-label rw-label-error\\"
        >
          Metadata
        </Label>
        <TextAreaField
          name=\\"metadata\\"
          defaultValue={JSON.stringify(props.post?.metadata)}
          className=\\"rw-input\\"
          errorClassName=\\"rw-input rw-input-error\\"
          validation={{ required: true }}
          transformValue=\\"Json\\"
        />

        <FieldError name=\\"metadata\\" className=\\"rw-field-error\\" />

        <div className=\\"rw-button-group\\">
          <Submit disabled={props.loading} className=\\"rw-button rw-button-blue\\">
            Save
          </Submit>
        </div>
      </Form>
    </div>
  )
}

export default PostForm
"
`;

exports[`in javascript (default) mode creates a index page 1`] = `
"import PostsCell from 'src/components/Post/PostsCell'

const PostsPage = () => {
  return <PostsCell />
}

export default PostsPage
"
`;

exports[`in javascript (default) mode creates a layout 1`] = `
"import { Link, routes } from '@redwoodjs/router'
import { Toaster } from '@redwoodjs/web/toast'

const PostsLayout = ({ children }) => {
  return (
    <div className=\\"rw-scaffold\\">
      <Toaster />
      <header className=\\"rw-header\\">
        <h1 className=\\"rw-heading rw-heading-primary\\">
          <Link to={routes.posts()} className=\\"rw-link\\">
            Posts
          </Link>
        </h1>
        <Link to={routes.newPost()} className=\\"rw-button rw-button-green\\">
          <div className=\\"rw-button-icon\\">+</div> New Post
        </Link>
      </header>
      <main className=\\"rw-main\\">{children}</main>
    </div>
  )
}

export default PostsLayout
"
`;

exports[`in javascript (default) mode creates a new component 1`] = `
"import { useMutation } from '@redwoodjs/web'
import { toast } from '@redwoodjs/web/toast'
import { navigate, routes } from '@redwoodjs/router'
import PostForm from 'src/components/Post/PostForm'

const CREATE_POST_MUTATION = gql\`
  mutation CreatePostMutation($input: CreatePostInput!) {
    createPost(input: $input) {
      id
    }
  }
\`

const NewPost = () => {
  const [createPost, { loading, error }] = useMutation(CREATE_POST_MUTATION, {
    onCompleted: () => {
      toast.success('Post created')
      navigate(routes.posts())
    },
  })

  const onSave = (input) => {
    createPost({ variables: { input } })
  }

  return (
    <div className=\\"rw-segment\\">
      <header className=\\"rw-segment-header\\">
        <h2 className=\\"rw-heading rw-heading-secondary\\">New Post</h2>
      </header>
      <div className=\\"rw-segment-main\\">
        <PostForm onSave={onSave} loading={loading} error={error} />
      </div>
    </div>
  )
}

export default NewPost
"
`;

exports[`in javascript (default) mode creates a new component with int foreign keys converted in onSave 1`] = `
"import { useMutation } from '@redwoodjs/web'
import { toast } from '@redwoodjs/web/toast'
import { navigate, routes } from '@redwoodjs/router'
import UserProfileForm from 'src/components/UserProfile/UserProfileForm'

const CREATE_USER_PROFILE_MUTATION = gql\`
  mutation CreateUserProfileMutation($input: CreateUserProfileInput!) {
    createUserProfile(input: $input) {
      id
    }
  }
\`

const NewUserProfile = () => {
  const [createUserProfile, { loading, error }] = useMutation(
    CREATE_USER_PROFILE_MUTATION,
    {
      onCompleted: () => {
        toast.success('UserProfile created')
        navigate(routes.userProfiles())
      },
    }
  )

  const onSave = (input) => {
    const castInput = Object.assign(input, { userId: parseInt(input.userId) })
    createUserProfile({ variables: { input: castInput } })
  }

  return (
    <div className=\\"rw-segment\\">
      <header className=\\"rw-segment-header\\">
        <h2 className=\\"rw-heading rw-heading-secondary\\">New UserProfile</h2>
      </header>
      <div className=\\"rw-segment-main\\">
        <UserProfileForm onSave={onSave} loading={loading} error={error} />
      </div>
    </div>
  )
}

export default NewUserProfile
"
`;

exports[`in javascript (default) mode creates a new page 1`] = `
"import NewPost from 'src/components/Post/NewPost'

const NewPostPage = () => {
  return <NewPost />
}

export default NewPostPage
"
`;

exports[`in javascript (default) mode creates a show cell 1`] = `
"import Post from 'src/components/Post/Post'

export const QUERY = gql\`
  query FindPostById($id: Int!) {
    post: post(id: $id) {
      id
      title
      slug
      author
      body
      image
      isPinned
      readTime
      rating
      postedAt
      metadata
    }
  }
\`

export const Loading = () => <div>Loading...</div>

export const Empty = () => <div>Post not found</div>

export const Failure = ({ error }) => (
  <div className=\\"rw-cell-error\\">{error.message}</div>
)

export const Success = ({ post }) => {
  return <Post post={post} />
}
"
`;

exports[`in javascript (default) mode creates a show component 1`] = `
"import { useMutation } from '@redwoodjs/web'
import { toast } from '@redwoodjs/web/toast'
import { Link, routes, navigate } from '@redwoodjs/router'

const DELETE_POST_MUTATION = gql\`
  mutation DeletePostMutation($id: Int!) {
    deletePost(id: $id) {
      id
    }
  }
\`

const jsonDisplay = (obj) => {
  return (
    <pre>
      <code>{JSON.stringify(obj, null, 2)}</code>
    </pre>
  )
}

const timeTag = (datetime) => {
  return (
    <time dateTime={datetime} title={datetime}>
      {new Date(datetime).toUTCString()}
    </time>
  )
}

const checkboxInputTag = (checked) => {
  return <input type=\\"checkbox\\" checked={checked} disabled />
}

const Post = ({ post }) => {
  const [deletePost] = useMutation(DELETE_POST_MUTATION, {
    onCompleted: () => {
      toast.success('Post deleted')
      navigate(routes.posts())
    },
  })

  const onDeleteClick = (id) => {
    if (confirm('Are you sure you want to delete post ' + id + '?')) {
      deletePost({ variables: { id } })
    }
  }

  return (
    <>
      <div className=\\"rw-segment\\">
        <header className=\\"rw-segment-header\\">
          <h2 className=\\"rw-heading rw-heading-secondary\\">
            Post {post.id} Detail
          </h2>
        </header>
        <table className=\\"rw-table\\">
          <tbody>
            <tr>
              <th>Id</th>
              <td>{post.id}</td>
            </tr>
            <tr>
              <th>Title</th>
              <td>{post.title}</td>
            </tr>
            <tr>
              <th>Slug</th>
              <td>{post.slug}</td>
            </tr>
            <tr>
              <th>Author</th>
              <td>{post.author}</td>
            </tr>
            <tr>
              <th>Body</th>
              <td>{post.body}</td>
            </tr>
            <tr>
              <th>Image</th>
              <td>{post.image}</td>
            </tr>
            <tr>
              <th>Is pinned</th>
              <td>{checkboxInputTag(post.isPinned)}</td>
            </tr>
            <tr>
              <th>Read time</th>
              <td>{post.readTime}</td>
            </tr>
            <tr>
              <th>Rating</th>
              <td>{post.rating}</td>
            </tr>
            <tr>
              <th>Posted at</th>
              <td>{timeTag(post.postedAt)}</td>
            </tr>
            <tr>
              <th>Metadata</th>
              <td>{jsonDisplay(post.metadata)}</td>
            </tr>
          </tbody>
        </table>
      </div>
      <nav className=\\"rw-button-group\\">
        <Link
          to={routes.editPost({ id: post.id })}
          className=\\"rw-button rw-button-blue\\"
        >
          Edit
        </Link>
        <button
          type=\\"button\\"
          className=\\"rw-button rw-button-red\\"
          onClick={() => onDeleteClick(post.id)}
        >
          Delete
        </button>
      </nav>
    </>
  )
}

export default Post
"
`;

exports[`in javascript (default) mode creates a show page 1`] = `
"import PostCell from 'src/components/Post/PostCell'

const PostPage = ({ id }) => {
  return <PostCell id={id} />
}

export default PostPage
"
`;

exports[`in javascript (default) mode creates a stylesheet 1`] = `
"/*
  normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css
*/

.rw-scaffold *,
.rw-scaffold ::after,
.rw-scaffold ::before {
  box-sizing: inherit;
}
.rw-scaffold main {
  color: #4a5568;
  display: block;
}
.rw-scaffold h1,
.rw-scaffold h2 {
  margin: 0;
}
.rw-scaffold a {
  background-color: transparent;
}
.rw-scaffold ul {
  margin: 0;
  padding: 0;
}
.rw-scaffold input {
  font-family: inherit;
  font-size: 100%;
  overflow: visible;
}
.rw-scaffold input:-ms-input-placeholder {
  color: #a0aec0;
}
.rw-scaffold input::-ms-input-placeholder {
  color: #a0aec0;
}
.rw-scaffold input::placeholder {
  color: #a0aec0;
}
.rw-scaffold table {
  border-collapse: collapse;
}

/*
  Style
*/

.rw-scaffold {
  background-color: #fff;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto,
    'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji',
    'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';
}
.rw-header {
  display: flex;
  justify-content: space-between;
  padding: 1rem 2rem 1rem 2rem;
}
.rw-main {
  margin-left: 1rem;
  margin-right: 1rem;
  padding-bottom: 1rem;
}
.rw-segment {
  background-color: #fff;
  border-width: 1px;
  border-radius: 0.5rem;
  overflow: hidden;
  width: 100%;
}
.rw-segment-header {
  background-color: #e2e8f0;
  color: #4a5568;
  padding: 0.75rem 1rem;
}
.rw-segment-main {
  background-color: #f7fafc;
  padding: 1rem;
}
.rw-link {
  color: #4299e1;
  text-decoration: underline;
}
.rw-link:hover {
  color: #2b6cb0;
}
.rw-heading {
  font-weight: 600;
}
.rw-heading.rw-heading-primary {
  font-size: 1.25rem;
}
.rw-heading.rw-heading-secondary {
  font-size: 0.875rem;
}
.rw-heading .rw-link {
  color: #4a5568;
  text-decoration: none;
}
.rw-heading .rw-link:hover {
  color: #1a202c;
  text-decoration: underline;
}
.rw-cell-error {
  font-size: 90%;
  font-weight: 600;
}
.rw-form-wrapper {
  box-sizing: border-box;
  font-size: 0.875rem;
  margin-top: -1rem;
}
.rw-cell-error,
.rw-form-error-wrapper {
  padding: 1rem;
  background-color: #fff5f5;
  color: #c53030;
  border-width: 1px;
  border-color: #feb2b2;
  border-radius: 0.25rem;
  margin: 1rem 0;
}
.rw-form-error-title {
  margin-top: 0;
  margin-bottom: 0;
  font-weight: 600;
}
.rw-form-error-list {
  margin-top: 0.5rem;
  list-style-type: disc;
  list-style-position: inside;
}
.rw-button {
  border: none;
  color: #718096;
  cursor: pointer;
  display: flex;
  justify-content: center;
  font-size: 0.75rem;
  font-weight: 600;
  padding: 0.25rem 1rem;
  text-transform: uppercase;
  text-decoration: none;
  letter-spacing: 0.025em;
  border-radius: 0.25rem;
  line-height: 2;
  border: 0;
}
.rw-button:hover {
  background-color: #718096;
  color: #fff;
}
.rw-button.rw-button-small {
  font-size: 0.75rem;
  border-radius: 0.125rem;
  padding: 0.25rem 0.5rem;
  line-height: inherit;
}
.rw-button.rw-button-green {
  background-color: #48bb78;
  color: #fff;
}
.rw-button.rw-button-green:hover {
  background-color: #38a169;
  color: #fff;
}
.rw-button.rw-button-blue {
  background-color: #3182ce;
  color: #fff;
}
.rw-button.rw-button-blue:hover {
  background-color: #2b6cb0;
}
.rw-button.rw-button-red {
  background-color: #e53e3e;
  color: #fff;
}
.rw-button.rw-button-red:hover {
  background-color: #c53030;
}
.rw-button-icon {
  font-size: 1.25rem;
  line-height: 1;
  margin-right: 0.25rem;
}
.rw-button-group {
  display: flex;
  justify-content: center;
  margin: 0.75rem 0.5rem;
}
.rw-button-group .rw-button {
  margin: 0 0.25rem;
}
.rw-form-wrapper .rw-button-group {
  margin-top: 2rem;
  margin-bottom: 0;
}
.rw-label {
  display: block;
  margin-top: 1.5rem;
  color: #4a5568;
  font-weight: 600;
}
.rw-label.rw-label-error {
  color: #c53030;
}
.rw-input {
  display: block;
  margin-top: 0.5rem;
  width: 100%;
  padding: 0.5rem;
  border-width: 1px;
  border-style: solid;
  border-color: #e2e8f0;
  color: #4a5568;
  border-radius: 0.25rem;
  outline: none;
}
.rw-input[type='checkbox'],
.rw-input[type='radio'] {
  width: 1rem;
  margin-left: 0;
}
.rw-input:focus {
  border-color: #a0aec0;
}
.rw-input-error {
  border-color: #c53030;
  color: #c53030;
}
.rw-field-error {
  display: block;
  margin-top: 0.25rem;
  font-weight: 600;
  text-transform: uppercase;
  font-size: 0.75rem;
  color: #c53030;
}
.rw-table-wrapper-responsive {
  overflow-x: scroll;
}
.rw-table-wrapper-responsive .rw-table {
  min-width: 48rem;
}
.rw-table {
  table-layout: auto;
  width: 100%;
  font-size: 0.875rem;
}
.rw-table th,
.rw-table td {
  padding: 0.75rem;
}
.rw-table thead tr {
  background-color: #e2e8f0;
  color: #4a5568;
}
.rw-table th {
  font-weight: 600;
  text-align: left;
}
.rw-table thead th {
  text-align: left;
}
.rw-table tbody th {
  text-align: right;
}
@media (min-width: 768px) {
  .rw-table tbody th {
    width: 20%;
  }
}
.rw-table tbody tr {
  background-color: #f7fafc;
  border-top-width: 1px;
}
.rw-table tbody tr:nth-child(even) {
  background-color: #fff;
}
.rw-table input {
  margin-left: 0;
}
.rw-table-actions {
  display: flex;
  justify-content: flex-end;
  align-items: center;
  height: 17px;
  padding-right: 0.25rem;
}
.rw-table-actions .rw-button {
  background-color: transparent;
}
.rw-table-actions .rw-button:hover {
  background-color: #718096;
  color: #fff;
}
.rw-table-actions .rw-button-blue {
  color: #3182ce;
}
.rw-table-actions .rw-button-blue:hover {
  background-color: #3182ce;
  color: #fff;
}
.rw-table-actions .rw-button-red {
  color: #e53e3e;
}
.rw-table-actions .rw-button-red:hover {
  background-color: #e53e3e;
  color: #fff;
}
.rw-text-center {
  text-align: center;
}
.rw-login-container {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 24rem;
  margin: 4rem auto;
  flex-wrap: wrap;
}
.rw-login-container .rw-form-wrapper {
  width: 100%;
}
.rw-login-link {
  margin-top: 1rem;
  color: #4a5568;
  font-size: 90%;
  text-align: center;
  flex-basis: 100%;
}
"
`;

exports[`in javascript (default) mode creates an edit cell 1`] = `undefined`;

exports[`in javascript (default) mode creates an edit component with int foreign keys converted in onSave 1`] = `
"import { useMutation } from '@redwoodjs/web'
import { toast } from '@redwoodjs/web/toast'
import { navigate, routes } from '@redwoodjs/router'

import UserProfileForm from 'src/components/UserProfile/UserProfileForm'

export const QUERY = gql\`
  query EditUserProfileById($id: Int!) {
    userProfile: userProfile(id: $id) {
      id
      username
      userId
    }
  }
\`
const UPDATE_USER_PROFILE_MUTATION = gql\`
  mutation UpdateUserProfileMutation(
    $id: Int!
    $input: UpdateUserProfileInput!
  ) {
    updateUserProfile(id: $id, input: $input) {
      id
      username
      userId
    }
  }
\`

export const Loading = () => <div>Loading...</div>

export const Failure = ({ error }) => (
  <div className=\\"rw-cell-error\\">{error.message}</div>
)

export const Success = ({ userProfile }) => {
  const [updateUserProfile, { loading, error }] = useMutation(
    UPDATE_USER_PROFILE_MUTATION,
    {
      onCompleted: () => {
        toast.success('UserProfile updated')
        navigate(routes.userProfiles())
      },
    }
  )

  const onSave = (input, id) => {
    const castInput = Object.assign(input, { userId: parseInt(input.userId) })
    updateUserProfile({ variables: { id, input: castInput } })
  }

  return (
    <div className=\\"rw-segment\\">
      <header className=\\"rw-segment-header\\">
        <h2 className=\\"rw-heading rw-heading-secondary\\">
          Edit UserProfile {userProfile.id}
        </h2>
      </header>
      <div className=\\"rw-segment-main\\">
        <UserProfileForm
          userProfile={userProfile}
          onSave={onSave}
          error={error}
          loading={loading}
        />
      </div>
    </div>
  )
}
"
`;

exports[`in javascript (default) mode creates an index cell 1`] = `
"import { Link, routes } from '@redwoodjs/router'

import Posts from 'src/components/Post/Posts'

export const QUERY = gql\`
  query FindPosts {
    posts {
      id
      title
      slug
      author
      body
      image
      isPinned
      readTime
      rating
      postedAt
      metadata
    }
  }
\`

export const Loading = () => <div>Loading...</div>

export const Empty = () => {
  return (
    <div className=\\"rw-text-center\\">
      {'No posts yet. '}
      <Link to={routes.newPost()} className=\\"rw-link\\">
        {'Create one?'}
      </Link>
    </div>
  )
}

export const Failure = ({ error }) => (
  <div className=\\"rw-cell-error\\">{error.message}</div>
)

export const Success = ({ posts }) => {
  return <Posts posts={posts} />
}
"
`;

exports[`in javascript (default) mode creates an index component 1`] = `
"import { useMutation } from '@redwoodjs/web'
import { toast } from '@redwoodjs/web/toast'
import { Link, routes } from '@redwoodjs/router'

import { QUERY } from 'src/components/Post/PostsCell'

const DELETE_POST_MUTATION = gql\`
  mutation DeletePostMutation($id: Int!) {
    deletePost(id: $id) {
      id
    }
  }
\`

const MAX_STRING_LENGTH = 150

const truncate = (text) => {
  let output = text
  if (text && text.length > MAX_STRING_LENGTH) {
    output = output.substring(0, MAX_STRING_LENGTH) + '...'
  }
  return output
}

const jsonTruncate = (obj) => {
  return truncate(JSON.stringify(obj, null, 2))
}

const timeTag = (datetime) => {
  return (
    <time dateTime={datetime} title={datetime}>
      {new Date(datetime).toUTCString()}
    </time>
  )
}

const checkboxInputTag = (checked) => {
  return <input type=\\"checkbox\\" checked={checked} disabled />
}

const PostsList = ({ posts }) => {
  const [deletePost] = useMutation(DELETE_POST_MUTATION, {
    onCompleted: () => {
      toast.success('Post deleted')
    },
    // This refetches the query on the list page. Read more about other ways to
    // update the cache over here:
    // https://www.apollographql.com/docs/react/data/mutations/#making-all-other-cache-updates
    refetchQueries: [{ query: QUERY }],
    awaitRefetchQueries: true,
  })

  const onDeleteClick = (id) => {
    if (confirm('Are you sure you want to delete post ' + id + '?')) {
      deletePost({ variables: { id } })
    }
  }

  return (
    <div className=\\"rw-segment rw-table-wrapper-responsive\\">
      <table className=\\"rw-table\\">
        <thead>
          <tr>
            <th>Id</th>
            <th>Title</th>
            <th>Slug</th>
            <th>Author</th>
            <th>Body</th>
            <th>Image</th>
            <th>Is pinned</th>
            <th>Read time</th>
            <th>Rating</th>
            <th>Posted at</th>
            <th>Metadata</th>
            <th>&nbsp;</th>
          </tr>
        </thead>
        <tbody>
          {posts.map((post) => (
            <tr key={post.id}>
              <td>{truncate(post.id)}</td>
              <td>{truncate(post.title)}</td>
              <td>{truncate(post.slug)}</td>
              <td>{truncate(post.author)}</td>
              <td>{truncate(post.body)}</td>
              <td>{truncate(post.image)}</td>
              <td>{checkboxInputTag(post.isPinned)}</td>
              <td>{truncate(post.readTime)}</td>
              <td>{truncate(post.rating)}</td>
              <td>{timeTag(post.postedAt)}</td>
              <td>{jsonTruncate(post.metadata)}</td>
              <td>
                <nav className=\\"rw-table-actions\\">
                  <Link
                    to={routes.post({ id: post.id })}
                    title={'Show post ' + post.id + ' detail'}
                    className=\\"rw-button rw-button-small\\"
                  >
                    Show
                  </Link>
                  <Link
                    to={routes.editPost({ id: post.id })}
                    title={'Edit post ' + post.id}
                    className=\\"rw-button rw-button-small rw-button-blue\\"
                  >
                    Edit
                  </Link>
                  <button
                    type=\\"button\\"
                    title={'Delete post ' + post.id}
                    className=\\"rw-button rw-button-small rw-button-red\\"
                    onClick={() => onDeleteClick(post.id)}
                  >
                    Delete
                  </button>
                </nav>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  )
}

export default PostsList
"
`;

exports[`in typescript mode creates a edit page 1`] = `
"import EditPostCell from 'src/components/Post/EditPostCell'

type PostPageProps = {
  id: number
}

const EditPostPage = ({ id }: PostPageProps) => {
  return <EditPostCell id={id} />
}

export default EditPostPage
"
`;

exports[`in typescript mode creates a form component 1`] = `
"import {
  Form,
  FormError,
  FieldError,
  Label,
  TextField,
  CheckboxField,
  NumberField,
  DatetimeLocalField,
  TextAreaField,
  Submit,
} from '@redwoodjs/forms'

const formatDatetime = (value) => {
  if (value) {
    return value.replace(/:\\\\d{2}\\\\.\\\\d{3}\\\\w/, '')
  }
}

const PostForm = (props) => {
  const onSubmit = (data) => {
    props.onSave(data, props?.post?.id)
  }

  return (
    <div className=\\"rw-form-wrapper\\">
      <Form onSubmit={onSubmit} error={props.error}>
        <FormError
          error={props.error}
          wrapperClassName=\\"rw-form-error-wrapper\\"
          titleClassName=\\"rw-form-error-title\\"
          listClassName=\\"rw-form-error-list\\"
        />

        <Label
          name=\\"title\\"
          className=\\"rw-label\\"
          errorClassName=\\"rw-label rw-label-error\\"
        >
          Title
        </Label>
        <TextField
          name=\\"title\\"
          defaultValue={props.post?.title}
          className=\\"rw-input\\"
          errorClassName=\\"rw-input rw-input-error\\"
          validation={{ required: true }}
        />
        <FieldError name=\\"title\\" className=\\"rw-field-error\\" />

        <Label
          name=\\"slug\\"
          className=\\"rw-label\\"
          errorClassName=\\"rw-label rw-label-error\\"
        >
          Slug
        </Label>
        <TextField
          name=\\"slug\\"
          defaultValue={props.post?.slug}
          className=\\"rw-input\\"
          errorClassName=\\"rw-input rw-input-error\\"
          validation={{ required: true }}
        />
        <FieldError name=\\"slug\\" className=\\"rw-field-error\\" />

        <Label
          name=\\"author\\"
          className=\\"rw-label\\"
          errorClassName=\\"rw-label rw-label-error\\"
        >
          Author
        </Label>
        <TextField
          name=\\"author\\"
          defaultValue={props.post?.author}
          className=\\"rw-input\\"
          errorClassName=\\"rw-input rw-input-error\\"
          validation={{ required: true }}
        />
        <FieldError name=\\"author\\" className=\\"rw-field-error\\" />

        <Label
          name=\\"body\\"
          className=\\"rw-label\\"
          errorClassName=\\"rw-label rw-label-error\\"
        >
          Body
        </Label>
        <TextField
          name=\\"body\\"
          defaultValue={props.post?.body}
          className=\\"rw-input\\"
          errorClassName=\\"rw-input rw-input-error\\"
          validation={{ required: true }}
        />
        <FieldError name=\\"body\\" className=\\"rw-field-error\\" />

        <Label
          name=\\"image\\"
          className=\\"rw-label\\"
          errorClassName=\\"rw-label rw-label-error\\"
        >
          Image
        </Label>
        <TextField
          name=\\"image\\"
          defaultValue={props.post?.image}
          className=\\"rw-input\\"
          errorClassName=\\"rw-input rw-input-error\\"
          validation={{ required: true }}
        />
        <FieldError name=\\"image\\" className=\\"rw-field-error\\" />

        <Label
          name=\\"isPinned\\"
          className=\\"rw-label\\"
          errorClassName=\\"rw-label rw-label-error\\"
        >
          Is pinned
        </Label>
        <CheckboxField
          name=\\"isPinned\\"
          defaultChecked={props.post?.isPinned}
          className=\\"rw-input\\"
          errorClassName=\\"rw-input rw-input-error\\"
        />
        <FieldError name=\\"isPinned\\" className=\\"rw-field-error\\" />

        <Label
          name=\\"readTime\\"
          className=\\"rw-label\\"
          errorClassName=\\"rw-label rw-label-error\\"
        >
          Read time
        </Label>
        <NumberField
          name=\\"readTime\\"
          defaultValue={props.post?.readTime}
          className=\\"rw-input\\"
          errorClassName=\\"rw-input rw-input-error\\"
          validation={{ required: true }}
        />
        <FieldError name=\\"readTime\\" className=\\"rw-field-error\\" />

        <Label
          name=\\"rating\\"
          className=\\"rw-label\\"
          errorClassName=\\"rw-label rw-label-error\\"
        >
          Rating
        </Label>
        <TextField
          name=\\"rating\\"
          defaultValue={props.post?.rating}
          className=\\"rw-input\\"
          errorClassName=\\"rw-input rw-input-error\\"
          validation={{ required: true }}
          transformValue=\\"Float\\"
        />
        <FieldError name=\\"rating\\" className=\\"rw-field-error\\" />

        <Label
          name=\\"postedAt\\"
          className=\\"rw-label\\"
          errorClassName=\\"rw-label rw-label-error\\"
        >
          Posted at
        </Label>
        <DatetimeLocalField
          name=\\"postedAt\\"
          defaultValue={formatDatetime(props.post?.postedAt)}
          className=\\"rw-input\\"
          errorClassName=\\"rw-input rw-input-error\\"
          validation={{ required: true }}
        />
        <FieldError name=\\"postedAt\\" className=\\"rw-field-error\\" />

        <Label
          name=\\"metadata\\"
          className=\\"rw-label\\"
          errorClassName=\\"rw-label rw-label-error\\"
        >
          Metadata
        </Label>
        <TextAreaField
          name=\\"metadata\\"
          defaultValue={JSON.stringify(props.post?.metadata)}
          className=\\"rw-input\\"
          errorClassName=\\"rw-input rw-input-error\\"
          validation={{ required: true }}
          transformValue=\\"Json\\"
        />
        <FieldError name=\\"metadata\\" className=\\"rw-field-error\\" />

        <div className=\\"rw-button-group\\">
          <Submit
            disabled={props.loading}
            className=\\"rw-button rw-button-blue\\"
          >
            Save
          </Submit>
        </div>
      </Form>
    </div>
  )
}

export default PostForm
"
`;

exports[`in typescript mode creates a index page 1`] = `
"import PostsCell from 'src/components/Post/PostsCell'

const PostsPage = () => {
  return <PostsCell />
}

export default PostsPage
"
`;

exports[`in typescript mode creates a layout 1`] = `
"import { Link, routes } from '@redwoodjs/router'
import { Toaster } from '@redwoodjs/web/toast'

type PostLayoutProps = {
  children: React.ReactNode
}

const PostsLayout = ({ children }: PostLayoutProps) => {
  return (
    <div className=\\"rw-scaffold\\">
      <Toaster />
      <header className=\\"rw-header\\">
        <h1 className=\\"rw-heading rw-heading-primary\\">
          <Link
            to={routes.posts()}
            className=\\"rw-link\\"
          >
            Posts
          </Link>
        </h1>
        <Link
          to={routes.newPost()}
          className=\\"rw-button rw-button-green\\"
        >
          <div className=\\"rw-button-icon\\">+</div> New Post
        </Link>
      </header>
      <main className=\\"rw-main\\">{children}</main>
    </div>
  )
}

export default PostsLayout
"
`;

exports[`in typescript mode creates a new component 1`] = `
"import { useMutation } from '@redwoodjs/web'
import { toast } from '@redwoodjs/web/toast'
import { navigate, routes } from '@redwoodjs/router'
import PostForm from 'src/components/Post/PostForm'

const CREATE_POST_MUTATION = gql\`
  mutation CreatePostMutation($input: CreatePostInput!) {
    createPost(input: $input) {
      id
    }
  }
\`

const NewPost = () => {
  const [createPost, { loading, error }] = useMutation(CREATE_POST_MUTATION, {
    onCompleted: () => {
      toast.success('Post created')
      navigate(routes.posts())
    },
  })

  const onSave = (input) => {
    createPost({ variables: { input } })
  }

  return (
    <div className=\\"rw-segment\\">
      <header className=\\"rw-segment-header\\">
        <h2 className=\\"rw-heading rw-heading-secondary\\">New Post</h2>
      </header>
      <div className=\\"rw-segment-main\\">
        <PostForm onSave={onSave} loading={loading} error={error} />
      </div>
    </div>
  )
}

export default NewPost
"
`;

exports[`in typescript mode creates a new component with int foreign keys converted in onSave 1`] = `
"import { useMutation } from '@redwoodjs/web'
import { toast } from '@redwoodjs/web/toast'
import { navigate, routes } from '@redwoodjs/router'
import UserProfileForm from 'src/components/UserProfile/UserProfileForm'

const CREATE_USER_PROFILE_MUTATION = gql\`
  mutation CreateUserProfileMutation($input: CreateUserProfileInput!) {
    createUserProfile(input: $input) {
      id
    }
  }
\`

const NewUserProfile = () => {
  const [createUserProfile, { loading, error }] = useMutation(CREATE_USER_PROFILE_MUTATION, {
    onCompleted: () => {
      toast.success('UserProfile created')
      navigate(routes.userProfiles())
    },
  })

  const onSave = (input) => {
    const castInput = Object.assign(input, { userId: parseInt(input.userId), })
    createUserProfile({ variables: { input: castInput } })
  }

  return (
    <div className=\\"rw-segment\\">
      <header className=\\"rw-segment-header\\">
        <h2 className=\\"rw-heading rw-heading-secondary\\">New UserProfile</h2>
      </header>
      <div className=\\"rw-segment-main\\">
        <UserProfileForm onSave={onSave} loading={loading} error={error} />
      </div>
    </div>
  )
}

export default NewUserProfile
"
`;

exports[`in typescript mode creates a new page 1`] = `
"import NewPost from 'src/components/Post/NewPost'

const NewPostPage = () => {
  return <NewPost />
}

export default NewPostPage
"
`;

exports[`in typescript mode creates a show cell 1`] = `
"import type { FindPostById } from 'types/graphql'
import type { CellSuccessProps, CellFailureProps } from '@redwoodjs/web'

import Post from 'src/components/Post/Post'

export const QUERY = gql\`
  query FindPostById($id: Int!) {
    post: post(id: $id) {
      id
      title
      slug
      author
      body
      image
      isPinned
      readTime
      rating
      postedAt
      metadata
    }
  }
\`

export const Loading = () => <div>Loading...</div>

export const Empty = () => <div>Post not found</div>

export const Failure = ({ error }: CellFailureProps) => (
  <div className=\\"rw-cell-error\\">{error.message}</div>
)

export const Success = ({ post }: CellSuccessProps<FindPostById>) => {
  return <Post post={post} />
}
"
`;

exports[`in typescript mode creates a show component 1`] = `
"import { useMutation } from '@redwoodjs/web'
import { toast } from '@redwoodjs/web/toast'
import { Link, routes, navigate } from '@redwoodjs/router'

const DELETE_POST_MUTATION = gql\`
  mutation DeletePostMutation($id: Int!) {
    deletePost(id: $id) {
      id
    }
  }
\`

const jsonDisplay = (obj) => {
  return (
    <pre>
      <code>{JSON.stringify(obj, null, 2)}</code>
    </pre>
  )
}

const timeTag = (datetime) => {
  return (
    <time dateTime={datetime} title={datetime}>
      {new Date(datetime).toUTCString()}
    </time>
  )
}

const checkboxInputTag = (checked) => {
  return <input type=\\"checkbox\\" checked={checked} disabled />
}

const Post = ({ post }) => {
  const [deletePost] = useMutation(DELETE_POST_MUTATION, {
    onCompleted: () => {
      toast.success('Post deleted')
      navigate(routes.posts())
    },
  })

  const onDeleteClick = (id) => {
    if (confirm('Are you sure you want to delete post ' + id + '?')) {
      deletePost({ variables: { id } })
    }
  }

  return (
    <>
      <div className=\\"rw-segment\\">
        <header className=\\"rw-segment-header\\">
          <h2 className=\\"rw-heading rw-heading-secondary\\">Post {post.id} Detail</h2>
        </header>
        <table className=\\"rw-table\\">
          <tbody>
            <tr>
              <th>Id</th>
              <td>{post.id}</td>
            </tr><tr>
              <th>Title</th>
              <td>{post.title}</td>
            </tr><tr>
              <th>Slug</th>
              <td>{post.slug}</td>
            </tr><tr>
              <th>Author</th>
              <td>{post.author}</td>
            </tr><tr>
              <th>Body</th>
              <td>{post.body}</td>
            </tr><tr>
              <th>Image</th>
              <td>{post.image}</td>
            </tr><tr>
              <th>Is pinned</th>
              <td>{checkboxInputTag(post.isPinned)}</td>
            </tr><tr>
              <th>Read time</th>
              <td>{post.readTime}</td>
            </tr><tr>
              <th>Rating</th>
              <td>{post.rating}</td>
            </tr><tr>
              <th>Posted at</th>
              <td>{timeTag(post.postedAt)}</td>
            </tr><tr>
              <th>Metadata</th>
              <td>{jsonDisplay(post.metadata)}</td>
            </tr>
          </tbody>
        </table>
      </div>
      <nav className=\\"rw-button-group\\">
        <Link
          to={routes.editPost({ id: post.id })}
          className=\\"rw-button rw-button-blue\\"
        >
          Edit
        </Link>
        <button
          type=\\"button\\"
          className=\\"rw-button rw-button-red\\"
          onClick={() => onDeleteClick(post.id)}
        >
          Delete
        </button>
      </nav>
    </>
  )
}

export default Post
"
`;

exports[`in typescript mode creates a show page 1`] = `
"import PostCell from 'src/components/Post/PostCell'

type PostPageProps = {
  id: Int
}

const PostPage = ({ id }: PostPageProps) => {
  return <PostCell id={id} />
}

export default PostPage
"
`;

exports[`in typescript mode creates a stylesheet 1`] = `
"/*
  normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css
*/

.rw-scaffold *,
.rw-scaffold ::after,
.rw-scaffold ::before {
  box-sizing: inherit;
}
.rw-scaffold main {
  color: #4a5568;
  display: block;
}
.rw-scaffold h1,
.rw-scaffold h2 {
  margin: 0;
}
.rw-scaffold a {
  background-color: transparent;
}
.rw-scaffold ul {
  margin: 0;
  padding: 0;
}
.rw-scaffold input {
  font-family: inherit;
  font-size: 100%;
  overflow: visible;
}
.rw-scaffold input:-ms-input-placeholder {
  color: #a0aec0;
}
.rw-scaffold input::-ms-input-placeholder {
  color: #a0aec0;
}
.rw-scaffold input::placeholder {
  color: #a0aec0;
}
.rw-scaffold table {
  border-collapse: collapse;
}

/*
  Style
*/

.rw-scaffold {
  background-color: #fff;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto,
    'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji',
    'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';
}
.rw-header {
  display: flex;
  justify-content: space-between;
  padding: 1rem 2rem 1rem 2rem;
}
.rw-main {
  margin-left: 1rem;
  margin-right: 1rem;
  padding-bottom: 1rem;
}
.rw-segment {
  background-color: #fff;
  border-width: 1px;
  border-radius: 0.5rem;
  overflow: hidden;
  width: 100%;
}
.rw-segment-header {
  background-color: #e2e8f0;
  color: #4a5568;
  padding: 0.75rem 1rem;
}
.rw-segment-main {
  background-color: #f7fafc;
  padding: 1rem;
}
.rw-link {
  color: #4299e1;
  text-decoration: underline;
}
.rw-link:hover {
  color: #2b6cb0;
}
.rw-heading {
  font-weight: 600;
}
.rw-heading.rw-heading-primary {
  font-size: 1.25rem;
}
.rw-heading.rw-heading-secondary {
  font-size: 0.875rem;
}
.rw-heading .rw-link {
  color: #4a5568;
  text-decoration: none;
}
.rw-heading .rw-link:hover {
  color: #1a202c;
  text-decoration: underline;
}
.rw-cell-error {
  font-size: 90%;
  font-weight: 600;
}
.rw-form-wrapper {
  box-sizing: border-box;
  font-size: 0.875rem;
  margin-top: -1rem;
}
.rw-cell-error,
.rw-form-error-wrapper {
  padding: 1rem;
  background-color: #fff5f5;
  color: #c53030;
  border-width: 1px;
  border-color: #feb2b2;
  border-radius: 0.25rem;
  margin: 1rem 0;
}
.rw-form-error-title {
  margin-top: 0;
  margin-bottom: 0;
  font-weight: 600;
}
.rw-form-error-list {
  margin-top: 0.5rem;
  list-style-type: disc;
  list-style-position: inside;
}
.rw-button {
  border: none;
  color: #718096;
  cursor: pointer;
  display: flex;
  justify-content: center;
  font-size: 0.75rem;
  font-weight: 600;
  padding: 0.25rem 1rem;
  text-transform: uppercase;
  text-decoration: none;
  letter-spacing: 0.025em;
  border-radius: 0.25rem;
  line-height: 2;
  border: 0;
}
.rw-button:hover {
  background-color: #718096;
  color: #fff;
}
.rw-button.rw-button-small {
  font-size: 0.75rem;
  border-radius: 0.125rem;
  padding: 0.25rem 0.5rem;
  line-height: inherit;
}
.rw-button.rw-button-green {
  background-color: #48bb78;
  color: #fff;
}
.rw-button.rw-button-green:hover {
  background-color: #38a169;
  color: #fff;
}
.rw-button.rw-button-blue {
  background-color: #3182ce;
  color: #fff;
}
.rw-button.rw-button-blue:hover {
  background-color: #2b6cb0;
}
.rw-button.rw-button-red {
  background-color: #e53e3e;
  color: #fff;
}
.rw-button.rw-button-red:hover {
  background-color: #c53030;
}
.rw-button-icon {
  font-size: 1.25rem;
  line-height: 1;
  margin-right: 0.25rem;
}
.rw-button-group {
  display: flex;
  justify-content: center;
  margin: 0.75rem 0.5rem;
}
.rw-button-group .rw-button {
  margin: 0 0.25rem;
}
.rw-form-wrapper .rw-button-group {
  margin-top: 2rem;
  margin-bottom: 0;
}
.rw-label {
  display: block;
  margin-top: 1.5rem;
  color: #4a5568;
  font-weight: 600;
}
.rw-label.rw-label-error {
  color: #c53030;
}
.rw-input {
  display: block;
  margin-top: 0.5rem;
  width: 100%;
  padding: 0.5rem;
  border-width: 1px;
  border-style: solid;
  border-color: #e2e8f0;
  color: #4a5568;
  border-radius: 0.25rem;
  outline: none;
}
.rw-input[type='checkbox'],
.rw-input[type='radio'] {
  width: 1rem;
  margin-left: 0;
}
.rw-input:focus {
  border-color: #a0aec0;
}
.rw-input-error {
  border-color: #c53030;
  color: #c53030;
}
.rw-field-error {
  display: block;
  margin-top: 0.25rem;
  font-weight: 600;
  text-transform: uppercase;
  font-size: 0.75rem;
  color: #c53030;
}
.rw-table-wrapper-responsive {
  overflow-x: scroll;
}
.rw-table-wrapper-responsive .rw-table {
  min-width: 48rem;
}
.rw-table {
  table-layout: auto;
  width: 100%;
  font-size: 0.875rem;
}
.rw-table th,
.rw-table td {
  padding: 0.75rem;
}
.rw-table thead tr {
  background-color: #e2e8f0;
  color: #4a5568;
}
.rw-table th {
  font-weight: 600;
  text-align: left;
}
.rw-table thead th {
  text-align: left;
}
.rw-table tbody th {
  text-align: right;
}
@media (min-width: 768px) {
  .rw-table tbody th {
    width: 20%;
  }
}
.rw-table tbody tr {
  background-color: #f7fafc;
  border-top-width: 1px;
}
.rw-table tbody tr:nth-child(even) {
  background-color: #fff;
}
.rw-table input {
  margin-left: 0;
}
.rw-table-actions {
  display: flex;
  justify-content: flex-end;
  align-items: center;
  height: 17px;
  padding-right: 0.25rem;
}
.rw-table-actions .rw-button {
  background-color: transparent;
}
.rw-table-actions .rw-button:hover {
  background-color: #718096;
  color: #fff;
}
.rw-table-actions .rw-button-blue {
  color: #3182ce;
}
.rw-table-actions .rw-button-blue:hover {
  background-color: #3182ce;
  color: #fff;
}
.rw-table-actions .rw-button-red {
  color: #e53e3e;
}
.rw-table-actions .rw-button-red:hover {
  background-color: #e53e3e;
  color: #fff;
}
.rw-text-center {
  text-align: center;
}
.rw-login-container {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 24rem;
  margin: 4rem auto;
  flex-wrap: wrap;
}
.rw-login-container .rw-form-wrapper {
  width: 100%;
}
.rw-login-link {
  margin-top: 1rem;
  color: #4a5568;
  font-size: 90%;
  text-align: center;
  flex-basis: 100%;
}
"
`;

exports[`in typescript mode creates an edit cell 1`] = `
"import type { EditPostById } from 'types/graphql'

import type { CellSuccessProps, CellFailureProps } from '@redwoodjs/web'
import { useMutation } from '@redwoodjs/web'
import { toast } from '@redwoodjs/web/toast'
import { navigate, routes } from '@redwoodjs/router'

import PostForm from 'src/components/Post/PostForm'

export const QUERY = gql\`
  query EditPostById($id: Int!) {
    post: post(id: $id) {
      id
      title
      slug
      author
      body
      image
      isPinned
      readTime
      rating
      postedAt
      metadata
    }
  }
\`
const UPDATE_POST_MUTATION = gql\`
  mutation UpdatePostMutation($id: Int!, $input: UpdatePostInput!) {
    updatePost(id: $id, input: $input) {
      id
      title
      slug
      author
      body
      image
      isPinned
      readTime
      rating
      postedAt
      metadata
    }
  }
\`

export const Loading = () => <div>Loading...</div>

export const Failure = ({ error }: CellFailureProps) => (
  <div className=\\"rw-cell-error\\">{error.message}</div>
)

export const Success = ({ post }: CellSuccessProps<EditPostById>) => {
  const [updatePost, { loading, error }] = useMutation(UPDATE_POST_MUTATION, {
    onCompleted: () => {
      toast.success('Post updated')
      navigate(routes.posts())
    },
  })

  const onSave = (input, id) => {
    updatePost({ variables: { id, input } })
  }

  return (
    <div className=\\"rw-segment\\">
      <header className=\\"rw-segment-header\\">
        <h2 className=\\"rw-heading rw-heading-secondary\\">Edit Post {post.id}</h2>
      </header>
      <div className=\\"rw-segment-main\\">
        <PostForm post={post} onSave={onSave} error={error} loading={loading} />
      </div>
    </div>
  )
}
"
`;

exports[`in typescript mode creates an edit component with int foreign keys converted in onSave 1`] = `
"import type { EditUserProfileById } from 'types/graphql'

import type { CellSuccessProps, CellFailureProps } from '@redwoodjs/web'
import { useMutation } from '@redwoodjs/web'
import { toast } from '@redwoodjs/web/toast'
import { navigate, routes } from '@redwoodjs/router'

import UserProfileForm from 'src/components/UserProfile/UserProfileForm'

export const QUERY = gql\`
  query EditUserProfileById($id: Int!) {
    userProfile: userProfile(id: $id) {
      id
      username
      userId
    }
  }
\`
const UPDATE_USER_PROFILE_MUTATION = gql\`
  mutation UpdateUserProfileMutation($id: Int!, $input: UpdateUserProfileInput!) {
    updateUserProfile(id: $id, input: $input) {
      id
      username
      userId
    }
  }
\`

export const Loading = () => <div>Loading...</div>

export const Failure = ({ error }: CellFailureProps) => (
  <div className=\\"rw-cell-error\\">{error.message}</div>
)

export const Success = ({ userProfile }: CellSuccessProps<EditUserProfileById>) => {
  const [updateUserProfile, { loading, error }] = useMutation(UPDATE_USER_PROFILE_MUTATION, {
    onCompleted: () => {
      toast.success('UserProfile updated')
      navigate(routes.userProfiles())
    },
  })

  const onSave = (input, id) => {
    const castInput = Object.assign(input, { userId: parseInt(input.userId), })
    updateUserProfile({ variables: { id, input: castInput } })
  }

  return (
    <div className=\\"rw-segment\\">
      <header className=\\"rw-segment-header\\">
        <h2 className=\\"rw-heading rw-heading-secondary\\">Edit UserProfile {userProfile.id}</h2>
      </header>
      <div className=\\"rw-segment-main\\">
        <UserProfileForm userProfile={userProfile} onSave={onSave} error={error} loading={loading} />
      </div>
    </div>
  )
}
"
`;

exports[`in typescript mode creates an index cell 1`] = `
"import type { FindPosts } from 'types/graphql'
import type { CellSuccessProps, CellFailureProps } from '@redwoodjs/web'

import { Link, routes } from '@redwoodjs/router'

import Posts from 'src/components/Post/Posts'

export const QUERY = gql\`
  query FindPosts {
    posts {
      id
      title
      slug
      author
      body
      image
      isPinned
      readTime
      rating
      postedAt
      metadata
    }
  }
\`

export const Loading = () => <div>Loading...</div>

export const Empty = () => {
  return (
    <div className=\\"rw-text-center\\">
      {'No posts yet. '}
      <Link
        to={routes.newPost()}
        className=\\"rw-link\\"
      >
        {'Create one?'}
      </Link>
    </div>
  )
}

export const Failure = ({ error }: CellFailureProps) => (
  <div className=\\"rw-cell-error\\">{error.message}</div>
)

export const Success = ({ posts }: CellSuccessProps<FindPosts>) => {
  return <Posts posts={posts} />
}
"
`;

exports[`in typescript mode creates an index component 1`] = `
"import { useMutation } from '@redwoodjs/web'
import { toast } from '@redwoodjs/web/toast'
import { Link, routes } from '@redwoodjs/router'

import { QUERY } from 'src/components/Post/PostsCell'

const DELETE_POST_MUTATION = gql\`
  mutation DeletePostMutation($id: Int!) {
    deletePost(id: $id) {
      id
    }
  }
\`

const MAX_STRING_LENGTH = 150

const truncate = (text) => {
  let output = text
  if (text && text.length > MAX_STRING_LENGTH) {
    output = output.substring(0, MAX_STRING_LENGTH) + '...'
  }
  return output
}

const jsonTruncate = (obj) => {
  return truncate(JSON.stringify(obj, null, 2))
}

const timeTag = (datetime) => {
  return (
    <time dateTime={datetime} title={datetime}>
      {new Date(datetime).toUTCString()}
    </time>
  )
}

const checkboxInputTag = (checked) => {
  return <input type=\\"checkbox\\" checked={checked} disabled />
}

const PostsList = ({ posts }) => {
  const [deletePost] = useMutation(DELETE_POST_MUTATION, {
    onCompleted: () => {
      toast.success('Post deleted')
    },
    // This refetches the query on the list page. Read more about other ways to
    // update the cache over here:
    // https://www.apollographql.com/docs/react/data/mutations/#making-all-other-cache-updates
    refetchQueries: [{ query: QUERY }],
    awaitRefetchQueries: true,
  })

  const onDeleteClick = (id) => {
    if (confirm('Are you sure you want to delete post ' + id + '?')) {
      deletePost({ variables: { id } })
    }
  }

  return (
    <div className=\\"rw-segment rw-table-wrapper-responsive\\">
      <table className=\\"rw-table\\">
        <thead>
          <tr>
            <th>Id</th>
            <th>Title</th>
            <th>Slug</th>
            <th>Author</th>
            <th>Body</th>
            <th>Image</th>
            <th>Is pinned</th>
            <th>Read time</th>
            <th>Rating</th>
            <th>Posted at</th>
            <th>Metadata</th>
            <th>&nbsp;</th>
          </tr>
        </thead>
        <tbody>
          {posts.map((post) => (
            <tr key={post.id}>
              <td>{truncate(post.id)}</td>
              <td>{truncate(post.title)}</td>
              <td>{truncate(post.slug)}</td>
              <td>{truncate(post.author)}</td>
              <td>{truncate(post.body)}</td>
              <td>{truncate(post.image)}</td>
              <td>{checkboxInputTag(post.isPinned)}</td>
              <td>{truncate(post.readTime)}</td>
              <td>{truncate(post.rating)}</td>
              <td>{timeTag(post.postedAt)}</td>
              <td>{jsonTruncate(post.metadata)}</td>
              <td>
                <nav className=\\"rw-table-actions\\">
                  <Link
                    to={routes.post({ id: post.id })}
                    title={'Show post ' + post.id + ' detail'}
                    className=\\"rw-button rw-button-small\\"
                  >
                    Show
                  </Link>
                  <Link
                    to={routes.editPost({ id: post.id })}
                    title={'Edit post ' + post.id}
                    className=\\"rw-button rw-button-small rw-button-blue\\"
                  >
                    Edit
                  </Link>
                  <button
                    type=\\"button\\"
                    title={'Delete post ' + post.id}
                    className=\\"rw-button rw-button-small rw-button-red\\"
                    onClick={() => onDeleteClick(post.id)}
                  >
                    Delete
                  </button>
                </nav>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  )
}

export default PostsList
"
`;
