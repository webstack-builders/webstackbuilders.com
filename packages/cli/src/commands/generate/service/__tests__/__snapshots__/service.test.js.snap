// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`in javascript mode creates a multi word service file 1`] = `
"import { db } from 'src/lib/db'
import { requireAuth } from 'src/lib/auth'

// Used when the environment variable REDWOOD_SECURE_SERVICES=1
export const beforeResolver = (rules) => {
  rules.add(requireAuth)
}

export const userProfiles = () => {
  return db.userProfile.findMany()
}
"
`;

exports[`in javascript mode creates a multi word service test file 1`] = `
"import { userProfiles } from './userProfiles'

describe('userProfiles', () => {
  scenario('returns all userProfiles', async (scenario) => {
    const result = await userProfiles()

    expect(result.length).toEqual(Object.keys(scenario.userProfile).length)
  })
})
"
`;

exports[`in javascript mode creates a multi word service test file with crud actions and only foreign as mandatory field 1`] = `
"import {
  transactions,
  transaction,
  createTransaction,
  updateTransaction,
  deleteTransaction,
} from './transactions'

describe('transactions', () => {
  scenario('returns all transactions', async (scenario) => {
    const result = await transactions()

    expect(result.length).toEqual(Object.keys(scenario.transaction).length)
  })

  scenario('returns a single transaction', async (scenario) => {
    const result = await transaction({ id: scenario.transaction.one.id })

    expect(result).toEqual(scenario.transaction.one)
  })

  scenario('creates a transaction', async (scenario) => {
    const result = await createTransaction({
      input: { userId: scenario.transaction.two.userId },
    })

    expect(result.userId).toEqual(scenario.transaction.two.userId)
  })

  scenario('updates a transaction', async (scenario) => {
    const original = await transaction({ id: scenario.transaction.one.id })
    const result = await updateTransaction({
      id: original.id,
      input: { userId: scenario.transaction.two.userId },
    })

    expect(result.userId).toEqual(scenario.transaction.two.userId)
  })

  scenario('deletes a transaction', async (scenario) => {
    const original = await deleteTransaction({
      id: scenario.transaction.one.id,
    })

    const result = await transaction({ id: original.id })

    expect(result).toEqual(null)
  })
})
"
`;

exports[`in javascript mode creates a single word service file 1`] = `
"import { db } from 'src/lib/db'
import { requireAuth } from 'src/lib/auth'

// Used when the environment variable REDWOOD_SECURE_SERVICES=1
export const beforeResolver = (rules) => {
  rules.add(requireAuth)
}

export const users = () => {
  return db.user.findMany()
}
"
`;

exports[`in javascript mode creates a single word service file with CRUD actions 1`] = `
"import { db } from 'src/lib/db'
import { requireAuth } from 'src/lib/auth'

// Used when the environment variable REDWOOD_SECURE_SERVICES=1
export const beforeResolver = (rules) => {
  rules.add(requireAuth)
}

export const posts = () => {
  return db.post.findMany()
}

export const post = ({ id }) => {
  return db.post.findUnique({
    where: { id },
  })
}

export const createPost = ({ input }) => {
  return db.post.create({
    data: input,
  })
}

export const updatePost = ({ id, input }) => {
  return db.post.update({
    data: input,
    where: { id },
  })
}

export const deletePost = ({ id }) => {
  return db.post.delete({
    where: { id },
  })
}
"
`;

exports[`in javascript mode creates a single word service file with a belongsTo relation 1`] = `
"import { db } from 'src/lib/db'
import { requireAuth } from 'src/lib/auth'

// Used when the environment variable REDWOOD_SECURE_SERVICES=1
export const beforeResolver = (rules) => {
  rules.add(requireAuth)
}

export const users = () => {
  return db.user.findMany()
}

export const User = {
  identity: (_obj, { root }) =>
    db.user.findUnique({ where: { id: root.id } }).identity(),
}
"
`;

exports[`in javascript mode creates a single word service file with a hasMany relation 1`] = `
"import { db } from 'src/lib/db'
import { requireAuth } from 'src/lib/auth'

// Used when the environment variable REDWOOD_SECURE_SERVICES=1
export const beforeResolver = (rules) => {
  rules.add(requireAuth)
}

export const users = () => {
  return db.user.findMany()
}

export const User = {
  userProfiles: (_obj, { root }) =>
    db.user.findUnique({ where: { id: root.id } }).userProfiles(),
}
"
`;

exports[`in javascript mode creates a single word service file with multiple relations 1`] = `
"import { db } from 'src/lib/db'
import { requireAuth } from 'src/lib/auth'

// Used when the environment variable REDWOOD_SECURE_SERVICES=1
export const beforeResolver = (rules) => {
  rules.add(requireAuth)
}

export const users = () => {
  return db.user.findMany()
}

export const User = {
  userProfiles: (_obj, { root }) =>
    db.user.findUnique({ where: { id: root.id } }).userProfiles(),
  identity: (_obj, { root }) =>
    db.user.findUnique({ where: { id: root.id } }).identity(),
}
"
`;

exports[`in javascript mode creates a single word service test file 1`] = `
"import { users } from './users'

describe('users', () => {
  scenario('returns all users', async (scenario) => {
    const result = await users()

    expect(result.length).toEqual(Object.keys(scenario.user).length)
  })
})
"
`;

exports[`in typescript mode creates a multi word service file 1`] = `
"import type { BeforeResolverSpecType } from '@redwoodjs/graphql-server'

import { db } from 'src/lib/db'
import { requireAuth } from 'src/lib/auth'

// Used when the environment variable REDWOOD_SECURE_SERVICES=1
export const beforeResolver = (rules: BeforeResolverSpecType) => {
  rules.add(requireAuth)
}

export const userProfiles = () => {
  return db.userProfile.findMany()
}
"
`;

exports[`in typescript mode creates a multi word service test file 1`] = `
"import { userProfiles } from './userProfiles'
import type { StandardScenario } from './userProfiles.scenarios'

describe('userProfiles', () => {
  scenario('returns all userProfiles', async (scenario: StandardScenario) => {
    const result = await userProfiles()

    expect(result.length).toEqual(Object.keys(scenario.userProfile).length)
  })
})
"
`;

exports[`in typescript mode creates a multi word service test file with crud actions and only foreign as mandatory field 1`] = `
"import {
  transactions,
  transaction,
  createTransaction,
  updateTransaction,
  deleteTransaction,
} from './transactions'
import type { StandardScenario } from './transactions.scenarios'

describe('transactions', () => {
  scenario('returns all transactions', async (scenario: StandardScenario) => {
    const result = await transactions()

    expect(result.length).toEqual(Object.keys(scenario.transaction).length)
  })

  scenario(
    'returns a single transaction',
    async (scenario: StandardScenario) => {
      const result = await transaction({ id: scenario.transaction.one.id })

      expect(result).toEqual(scenario.transaction.one)
    }
  )

  scenario('creates a transaction', async (scenario: StandardScenario) => {
    const result = await createTransaction({
      input: { userId: scenario.transaction.two.userId },
    })

    expect(result.userId).toEqual(scenario.transaction.two.userId)
  })

  scenario('updates a transaction', async (scenario: StandardScenario) => {
    const original = await transaction({ id: scenario.transaction.one.id })
    const result = await updateTransaction({
      id: original.id,
      input: { userId: scenario.transaction.two.userId },
    })

    expect(result.userId).toEqual(scenario.transaction.two.userId)
  })

  scenario('deletes a transaction', async (scenario: StandardScenario) => {
    const original = await deleteTransaction({
      id: scenario.transaction.one.id,
    })
    const result = await transaction({ id: original.id })

    expect(result).toEqual(null)
  })
})
"
`;

exports[`in typescript mode creates a single word service file 1`] = `
"import type { BeforeResolverSpecType } from '@redwoodjs/graphql-server'

import { db } from 'src/lib/db'
import { requireAuth } from 'src/lib/auth'

// Used when the environment variable REDWOOD_SECURE_SERVICES=1
export const beforeResolver = (rules: BeforeResolverSpecType) => {
  rules.add(requireAuth)
}

export const users = () => {
  return db.user.findMany()
}
"
`;

exports[`in typescript mode creates a single word service file with CRUD actions 1`] = `
"import type { Prisma } from '@prisma/client'
import type { BeforeResolverSpecType } from '@redwoodjs/graphql-server'

import { db } from 'src/lib/db'
import { requireAuth } from 'src/lib/auth'

// Used when the environment variable REDWOOD_SECURE_SERVICES=1
export const beforeResolver = (rules: BeforeResolverSpecType) => {
  rules.add(requireAuth)
}

export const posts = () => {
  return db.post.findMany()
}

export const post = ({ id }: Prisma.PostWhereUniqueInput) => {
  return db.post.findUnique({
    where: { id },
  })
}

interface CreatePostArgs {
  input: Prisma.PostCreateInput
}

export const createPost = ({ input }: CreatePostArgs) => {
  return db.post.create({
    data: input,
  })
}

interface UpdatePostArgs extends Prisma.PostWhereUniqueInput {
  input: Prisma.PostUpdateInput
}

export const updatePost = ({ id, input }: UpdatePostArgs) => {
  return db.post.update({
    data: input,
    where: { id },
  })
}

export const deletePost = ({ id }: Prisma.PostWhereUniqueInput) => {
  return db.post.delete({
    where: { id },
  })
}
"
`;

exports[`in typescript mode creates a single word service file with a belongsTo relation 1`] = `
"import type { Prisma } from '@prisma/client'
import type {
  ResolverArgs,
  BeforeResolverSpecType,
} from '@redwoodjs/graphql-server'

import { db } from 'src/lib/db'
import { requireAuth } from 'src/lib/auth'

// Used when the environment variable REDWOOD_SECURE_SERVICES=1
export const beforeResolver = (rules: BeforeResolverSpecType) => {
  rules.add(requireAuth)
}

export const users = () => {
  return db.user.findMany()
}

export const User = {
  identity: (_obj, { root }: ResolverArgs<ReturnType<typeof user>>) =>
    db.user.findUnique({ where: { id: root.id } }).identity(),
}
"
`;

exports[`in typescript mode creates a single word service file with a hasMany relation 1`] = `
"import type { Prisma } from '@prisma/client'
import type {
  ResolverArgs,
  BeforeResolverSpecType,
} from '@redwoodjs/graphql-server'

import { db } from 'src/lib/db'
import { requireAuth } from 'src/lib/auth'

// Used when the environment variable REDWOOD_SECURE_SERVICES=1
export const beforeResolver = (rules: BeforeResolverSpecType) => {
  rules.add(requireAuth)
}

export const users = () => {
  return db.user.findMany()
}

export const User = {
  userProfiles: (_obj, { root }: ResolverArgs<ReturnType<typeof user>>) =>
    db.user.findUnique({ where: { id: root.id } }).userProfiles(),
}
"
`;

exports[`in typescript mode creates a single word service file with multiple relations 1`] = `
"import type { Prisma } from '@prisma/client'
import type {
  ResolverArgs,
  BeforeResolverSpecType,
} from '@redwoodjs/graphql-server'

import { db } from 'src/lib/db'
import { requireAuth } from 'src/lib/auth'

// Used when the environment variable REDWOOD_SECURE_SERVICES=1
export const beforeResolver = (rules: BeforeResolverSpecType) => {
  rules.add(requireAuth)
}

export const users = () => {
  return db.user.findMany()
}

export const User = {
  userProfiles: (_obj, { root }: ResolverArgs<ReturnType<typeof user>>) =>
    db.user.findUnique({ where: { id: root.id } }).userProfiles(),
  identity: (_obj, { root }: ResolverArgs<ReturnType<typeof user>>) =>
    db.user.findUnique({ where: { id: root.id } }).identity(),
}
"
`;

exports[`in typescript mode creates a single word service test file 1`] = `
"import { users } from './users'
import type { StandardScenario } from './users.scenarios'

describe('users', () => {
  scenario('returns all users', async (scenario: StandardScenario) => {
    const result = await users()

    expect(result.length).toEqual(Object.keys(scenario.user).length)
  })
})
"
`;
