// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`JavaScript: includes skip link when --skipLink is set to true 1`] = `
"import { SkipNavLink, SkipNavContent } from '@redwoodjs/router'
import '@reach/skip-nav/styles.css'

/**
 * since the main content isn't usually the first thing in the document,
 * it's important to provide a shortcut for keyboard and screen-reader users to skip to the main content
 * API docs: https://reach.tech/skip-nav/#reach-skip-nav
 */

const A11yLayout = ({ children }) => {
  return (
    <>
      {/* renders a link that remains hidden till focused; put it at the top of your layout */}
      <SkipNavLink />
      <nav></nav>
      {/* renders a div as the target for the link; put it next to your main content */}
      <SkipNavContent />
      <main>{children}</main>
    </>
  )
}

export default A11yLayout
"
`;

exports[`TypeScript: includes skip link when --skipLink is set to true 1`] = `
"import { SkipNavLink, SkipNavContent } from '@redwoodjs/router'
import '@reach/skip-nav/styles.css'

/**
 * since the main content isn't usually the first thing in the document,
 * it's important to provide a shortcut for keyboard and screen-reader users to skip to the main content
 * API docs: https://reach.tech/skip-nav/#reach-skip-nav
 */

type A11yLayoutProps = {
  children?: React.ReactNode
}

const A11yLayout = ({ children }: A11yLayoutProps) => {
  return (
    <>
      {/* renders a link that remains hidden till focused; put it at the top of your layout */}
      <SkipNavLink />
      <nav></nav>
      {/* renders a div as the target for the link; put it next to your main content */}
      <SkipNavContent />
      <main>{children}</main>
    </>
  )
}

export default A11yLayout
"
`;

exports[`creates a multi word layout component 1`] = `
"const SinglePageLayout = ({ children }) => {
  return <>{children}</>
}

export default SinglePageLayout
"
`;

exports[`creates a multi word layout test 1`] = `
"import { render } from '@redwoodjs/testing/web'

import SinglePageLayout from './SinglePageLayout'

describe('SinglePageLayout', () => {
  it('renders successfully', () => {
    expect(() => {
      render(<SinglePageLayout />)
    }).not.toThrow()
  })
})
"
`;

exports[`creates a multi word layout test 2`] = `
"import SinglePageLayout from './SinglePageLayout'

export const generated = () => {
  return <SinglePageLayout />
}

export default { title: 'Layouts/SinglePageLayout' }
"
`;

exports[`creates a single word layout component 1`] = `
"const AppLayout = ({ children }) => {
  return <>{children}</>
}

export default AppLayout
"
`;

exports[`creates a single word layout stories 1`] = `
"import AppLayout from './AppLayout'

export const generated = () => {
  return <AppLayout />
}

export default { title: 'Layouts/AppLayout' }
"
`;

exports[`creates a single word layout test 1`] = `
"import { render } from '@redwoodjs/testing/web'

import AppLayout from './AppLayout'

describe('AppLayout', () => {
  it('renders successfully', () => {
    expect(() => {
      render(<AppLayout />)
    }).not.toThrow()
  })
})
"
`;
