# Add date formatting options.
directive @dateformat(formatString: String, locale: String, fromNow: Boolean, difference: String) on FIELD_DEFINITION

# Link to node by foreign-key relation.
directive @link(by: String! = "id", from: String, on: String) on FIELD_DEFINITION

# Link to File node by relative path.
directive @fileByRelativePath(from: String) on FIELD_DEFINITION

# Proxy resolver from another field.
directive @proxy(from: String!, fromNode: Boolean! = false) on FIELD_DEFINITION

# Infer field types from field values.
directive @infer on OBJECT

# Do not infer field types from field values.
directive @dontInfer on OBJECT

# Define the mime-types handled by this type.
directive @mimeTypes(
  # The mime-types handled by this type.
  types: [String!]! = []
) on OBJECT

# Define parent-child relations between types. This is used to add `child*` and `children*` convenience fields like `childImageSharp`.
directive @childOf(
  # A list of mime-types this type is a child of. Usually these are the mime-types handled by a transformer plugin.
  mimeTypes: [String!]! = []

  # A list of types this type is a child of. Usually these are the types handled by a transformer plugin.
  types: [String!]! = []
) on OBJECT

# DEPRECATED: Use interface inheritance instead, i.e. "interface Foo implements Node".
#
# Adds root query fields for an interface. All implementing types must also implement the Node interface.
directive @nodeInterface on INTERFACE

type File implements Node {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  accessTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  changeTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  birthTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  mtime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  ctime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")

  # Returns all children nodes filtered by type ImageSharp
  childrenImageSharp: [ImageSharp]

  # Returns the first child node of type ImageSharp or null if there are no children of given type on this node
  childImageSharp: ImageSharp
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

# Node Interface
interface Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type Internal {
  content: String
  contentDigest: String!
  description: String
  fieldOwners: [String]
  ignoreType: Boolean
  mediaType: String
  owner: String!
  type: String!
}

# A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
scalar Date

type Directory implements Node {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  accessTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  changeTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  birthTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  mtime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  ctime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type Site implements Node {
  buildTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  siteMetadata: SiteSiteMetadata
  port: Int
  host: String
  polyfill: Boolean
  pathPrefix: String
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type SiteSiteMetadata {
  title: String
  description: String
  keywords: String
  siteUrl: String
  author: SiteSiteMetadataAuthor
  social: [SiteSiteMetadataSocial]
}

type SiteSiteMetadataAuthor {
  name: String
  url: String
  email: String
}

type SiteSiteMetadataSocial {
  name: String
  url: String
}

type SiteFunction implements Node {
  functionRoute: String!
  pluginName: String!
  originalAbsoluteFilePath: String!
  originalRelativeFilePath: String!
  relativeCompiledFilePath: String!
  absoluteCompiledFilePath: String!
  matchPath: String
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type SitePage implements Node {
  path: String!
  component: String!
  internalComponentName: String!
  componentChunkName: String!
  matchPath: String
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  isCreatedByStatefulCreatePages: Boolean
  context: SitePageContext
  pluginCreator: SitePlugin
  pluginCreatorId: String
}

type SitePageContext {
  id: String
}

type SanityAuthor implements SanityDocument & Node {
  _id: String
  _type: String
  _createdAt(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  _updatedAt(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  _rev: String
  _key: String
  name: String
  slug: SanitySlug
  image: SanityMainImage
  bio: [SanityBlock]
  _rawSlug(resolveReferences: SanityResolveReferencesConfiguration): JSON
  _rawImage(resolveReferences: SanityResolveReferencesConfiguration): JSON
  _rawBio(resolveReferences: SanityResolveReferencesConfiguration): JSON
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type SanityAuthorReference {
  _key: String
  _type: String
  author: SanityAuthor
  _rawAuthor(resolveReferences: SanityResolveReferencesConfiguration): JSON
}

union SanityAuthorReferenceOrSpan = SanityAuthorReference | SanitySpan

type SanityBlock {
  _key: String
  _type: String
  children: [SanitySpan]
  style: String
  list: String
  _rawChildren(resolveReferences: SanityResolveReferencesConfiguration): JSON
}

union SanityBlockOrMainImage = SanityBlock | SanityMainImage

type SanityCategory implements SanityDocument & Node {
  _id: String
  _type: String
  _createdAt(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  _updatedAt(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  _rev: String
  _key: String
  title: String
  description: String
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

# A Sanity document
interface SanityDocument {
  _id: String
  _type: String
  _createdAt: Date
  _updatedAt: Date
  _rev: String
}

type SanityFile {
  _key: String
  _type: String
  asset: SanityFileAsset
  _rawAsset(resolveReferences: SanityResolveReferencesConfiguration): JSON
}

type SanityGeopoint {
  _key: String
  _type: String
  lat: Float
  lng: Float
  alt: Float
}

type SanityImage {
  _key: String
  _type: String
  asset: SanityImageAsset
  hotspot: SanityImageHotspot
  crop: SanityImageCrop
  _rawAsset(resolveReferences: SanityResolveReferencesConfiguration): JSON
  _rawHotspot(resolveReferences: SanityResolveReferencesConfiguration): JSON
  _rawCrop(resolveReferences: SanityResolveReferencesConfiguration): JSON
}

type SanityMainImage {
  _key: String
  _type: String
  asset: SanityImageAsset
  hotspot: SanityImageHotspot
  crop: SanityImageCrop
  caption: String
  alt: String
  _rawAsset(resolveReferences: SanityResolveReferencesConfiguration): JSON
  _rawHotspot(resolveReferences: SanityResolveReferencesConfiguration): JSON
  _rawCrop(resolveReferences: SanityResolveReferencesConfiguration): JSON
}

type SanityPost implements SanityDocument & Node {
  _id: String
  _type: String
  _createdAt(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  _updatedAt(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  _rev: String
  _key: String
  title: String
  slug: SanitySlug
  publishedAt(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  mainImage: SanityMainImage
  authors: [SanityAuthorReference]
  categories: [SanityCategory]
  excerpt: [SanityBlock]
  body: [SanityBlock]
  _rawSlug(resolveReferences: SanityResolveReferencesConfiguration): JSON
  _rawMainImage(resolveReferences: SanityResolveReferencesConfiguration): JSON
  _rawExcerpt(resolveReferences: SanityResolveReferencesConfiguration): JSON
  _rawAuthors(resolveReferences: SanityResolveReferencesConfiguration): JSON
  _rawCategories(resolveReferences: SanityResolveReferencesConfiguration): JSON
  _rawBody(resolveReferences: SanityResolveReferencesConfiguration): JSON
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type SanityAssetSourceData {
  _key: String
  _type: String
  name: String
  id: String
  url: String
}

type SanityFileAsset implements SanityDocument & Node {
  _id: String
  _type: String
  _createdAt(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  _updatedAt(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  _rev: String
  _key: String
  originalFilename: String
  label: String
  title: String
  description: String
  altText: String
  sha1hash: String
  extension: String
  mimeType: String
  size: Float
  assetId: String
  path: String
  url: String
  source: SanityAssetSourceData
  _rawSource(resolveReferences: SanityResolveReferencesConfiguration): JSON
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type SanityImageAsset implements SanityDocument & Node {
  _id: String
  _type: String
  _createdAt(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  _updatedAt(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  _rev: String
  _key: String
  originalFilename: String
  label: String
  title: String
  description: String
  altText: String
  sha1hash: String
  extension: String
  mimeType: String
  size: Float
  assetId: String
  path: String
  url: String
  metadata: SanityImageMetadata
  source: SanityAssetSourceData
  _rawMetadata(resolveReferences: SanityResolveReferencesConfiguration): JSON
  _rawSource(resolveReferences: SanityResolveReferencesConfiguration): JSON
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed. 
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder.
    placeholder: SanityGatsbyImagePlaceholder = DOMINANT_COLOR

    # The image formats to generate. Valid values are AUTO (meaning the same format as the source image), JPG, PNG, WEBP and AVIF.
    # The default value is [AUTO, WEBP], and you should rarely need to change this. Take care if you specify JPG or PNG when you do
    # not know the formats of the source images, as this could lead to unwanted results such as converting JPEGs to PNGs. Specifying
    # both PNG and JPG is not supported and will be ignored.
    formats: [GatsbyImageFormat] = [NO_CHANGE, WEBP]

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String
    fit: SanityImageFit = FILL
  ): JSON!
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

enum GatsbyImageLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum SanityGatsbyImagePlaceholder {
  DOMINANT_COLOR
  BLURRED
  NONE
}

enum GatsbyImageFormat {
  NO_CHANGE
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum SanityImageFit {
  CLIP
  CROP
  FILL
  FILLMAX
  MAX
  SCALE
  MIN
}

type SanityImageCrop {
  _key: String
  _type: String
  top: Float
  bottom: Float
  left: Float
  right: Float
}

type SanityImageDimensions {
  _key: String
  _type: String
  height: Float
  width: Float
  aspectRatio: Float
}

type SanityImageHotspot {
  _key: String
  _type: String
  x: Float
  y: Float
  height: Float
  width: Float
}

type SanityImageMetadata {
  _key: String
  _type: String
  location: SanityGeopoint
  dimensions: SanityImageDimensions
  palette: SanityImagePalette
  lqip: String
  hasAlpha: Boolean
  isOpaque: Boolean
  _rawLocation(resolveReferences: SanityResolveReferencesConfiguration): JSON
  _rawDimensions(resolveReferences: SanityResolveReferencesConfiguration): JSON
  _rawPalette(resolveReferences: SanityResolveReferencesConfiguration): JSON
}

type SanityImagePalette {
  _key: String
  _type: String
  darkMuted: SanityImagePaletteSwatch
  lightVibrant: SanityImagePaletteSwatch
  darkVibrant: SanityImagePaletteSwatch
  vibrant: SanityImagePaletteSwatch
  dominant: SanityImagePaletteSwatch
  lightMuted: SanityImagePaletteSwatch
  muted: SanityImagePaletteSwatch
  _rawDarkMuted(resolveReferences: SanityResolveReferencesConfiguration): JSON
  _rawLightVibrant(resolveReferences: SanityResolveReferencesConfiguration): JSON
  _rawDarkVibrant(resolveReferences: SanityResolveReferencesConfiguration): JSON
  _rawVibrant(resolveReferences: SanityResolveReferencesConfiguration): JSON
  _rawDominant(resolveReferences: SanityResolveReferencesConfiguration): JSON
  _rawLightMuted(resolveReferences: SanityResolveReferencesConfiguration): JSON
  _rawMuted(resolveReferences: SanityResolveReferencesConfiguration): JSON
}

type SanityImagePaletteSwatch {
  _key: String
  _type: String
  background: String
  foreground: String
  population: Float
  title: String
}

type SanitySiteSettings implements SanityDocument & Node {
  _id: String
  _type: String
  _createdAt(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  _updatedAt(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  _rev: String
  _key: String
  title: String
  description: String
  keywords: [String]
  author: SanityAuthor
  _rawAuthor(resolveReferences: SanityResolveReferencesConfiguration): JSON
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type SanitySlug {
  _key: String
  _type: String
  current: String
}

type SanitySpan {
  _key: String
  _type: String
  marks: [String]
  text: String
}

input SanityResolveReferencesConfiguration {
  # Max depth to resolve references to
  maxDepth: Int!
}

type ThemeUiConfig implements Node {
  preset: JSON
  prismPreset: JSON
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

enum ImageFormat {
  NO_CHANGE
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum ImageFit {
  COVER
  CONTAIN
  FILL
  INSIDE
  OUTSIDE
}

enum ImageLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum ImageCropFocus {
  CENTER
  NORTH
  NORTHEAST
  EAST
  SOUTHEAST
  SOUTH
  SOUTHWEST
  WEST
  NORTHWEST
  ENTROPY
  ATTENTION
}

input DuotoneGradient {
  highlight: String!
  shadow: String!
  opacity: Int
}

enum PotraceTurnPolicy {
  TURNPOLICY_BLACK
  TURNPOLICY_WHITE
  TURNPOLICY_LEFT
  TURNPOLICY_RIGHT
  TURNPOLICY_MINORITY
  TURNPOLICY_MAJORITY
}

input Potrace {
  turnPolicy: PotraceTurnPolicy
  turdSize: Float
  alphaMax: Float
  optCurve: Boolean
  optTolerance: Float
  threshold: Int
  blackOnWhite: Boolean
  color: String
  background: String
}

type ImageSharp implements Node {
  fixed(width: Int, height: Int, base64Width: Int, jpegProgressive: Boolean = true, pngCompressionSpeed: Int = 4, grayscale: Boolean = false, duotone: DuotoneGradient, traceSVG: Potrace, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, toFormat: ImageFormat = AUTO, toFormatBase64: ImageFormat = AUTO, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int = 0, trim: Float = 0): ImageSharpFixed
  fluid(
    maxWidth: Int
    maxHeight: Int
    base64Width: Int
    grayscale: Boolean = false
    jpegProgressive: Boolean = true
    pngCompressionSpeed: Int = 4
    duotone: DuotoneGradient
    traceSVG: Potrace
    quality: Int
    jpegQuality: Int
    pngQuality: Int
    webpQuality: Int
    toFormat: ImageFormat = AUTO
    toFormatBase64: ImageFormat = AUTO
    cropFocus: ImageCropFocus = ATTENTION
    fit: ImageFit = COVER
    background: String = "rgba(0,0,0,1)"
    rotate: Int = 0
    trim: Float = 0
    sizes: String = ""

    # A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
    srcSetBreakpoints: [Int] = []
  ): ImageSharpFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: ImageLayout = CONSTRAINED

    # The display width of the generated image for layout = FIXED, and the maximum display width of the largest image for layout = CONSTRAINED.
    # Ignored if layout = FLUID.
    width: Int

    # The display height of the generated image for layout = FIXED, and the maximum display height of the largest image for layout = CONSTRAINED.
    # The image will be cropped if the aspect ratio does not match the source image. If omitted, it is calculated from the supplied width,
    # matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # TRACED_SVG: a low-resolution traced SVG of the image.
    # NONE: no placeholder. Set "background" to use a fixed background color.
    placeholder: ImagePlaceholder

    # Options for the low-resolution placeholder image. Set placeholder to "BLURRED" to use this
    blurredOptions: BlurredOptions

    # Options for traced placeholder SVGs. You also should set placeholder to "TRACED_SVG".
    tracedSVGOptions: Potrace

    # The image formats to generate. Valid values are "AUTO" (meaning the same format as the source image), "JPG", "PNG", "WEBP" and "AVIF".
    # The default value is [AUTO, WEBP], and you should rarely need to change this. Take care if you specify JPG or PNG when you do
    # not know the formats of the source images, as this could lead to unwanted results such as converting JPEGs to PNGs. Specifying
    # both PNG and JPG is not supported and will be ignored.
    formats: [ImageFormat]

    # A list of image pixel densities to generate. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for FIXED images, meaning 1x and 2x and [0.25, 0.5, 1, 2] for CONSTRAINED. In this case, an image with a constrained layout
    # and width = 400 would generate images at 100, 200, 400 and 800px wide. Ignored for FULL_WIDTH images, which use breakpoints instead
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download.
    # You should usually leave this blank, and a suitable value will be calculated. The exception is if a FULL_WIDTH image
    # does not actually span the full width of the screen, in which case you should pass the correct size here.
    sizes: String

    # The default quality. This is overridden by any format-specific options
    quality: Int

    # Options to pass to sharp when generating JPG images.
    jpgOptions: JPGOptions

    # Options to pass to sharp when generating PNG images.
    pngOptions: PNGOptions

    # Options to pass to sharp when generating WebP images.
    webpOptions: WebPOptions

    # Options to pass to sharp when generating AVIF images.
    avifOptions: AVIFOptions

    # Options to pass to sharp to control cropping and other image manipulations.
    transformOptions: TransformOptions

    # Background color applied to the wrapper. Also passed to sharp to use as a background when "letterboxing" an image to another aspect ratio.
    backgroundColor: String
  ): JSON!
  original: ImageSharpOriginal
  resize(width: Int, height: Int, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, jpegProgressive: Boolean = true, pngCompressionLevel: Int = 9, pngCompressionSpeed: Int = 4, grayscale: Boolean = false, duotone: DuotoneGradient, base64: Boolean = false, traceSVG: Potrace, toFormat: ImageFormat = AUTO, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int = 0, trim: Float = 0): ImageSharpResize
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type ImageSharpFixed {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  width: Float!
  height: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  originalName: String
}

type ImageSharpFluid {
  base64: String
  tracedSVG: String
  aspectRatio: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  sizes: String!
  originalImg: String
  originalName: String
  presentationWidth: Int!
  presentationHeight: Int!
}

enum ImagePlaceholder {
  DOMINANT_COLOR
  TRACED_SVG
  BLURRED
  NONE
}

input BlurredOptions {
  # Width of the generated low-res preview. Default is 20px
  width: Int

  # Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this
  toFormat: ImageFormat
}

input JPGOptions {
  quality: Int
  progressive: Boolean = true
}

input PNGOptions {
  quality: Int
  compressionSpeed: Int = 4
}

input WebPOptions {
  quality: Int
}

input AVIFOptions {
  quality: Int
  lossless: Boolean
  speed: Int
}

input TransformOptions {
  grayscale: Boolean = false
  duotone: DuotoneGradient
  rotate: Int = 0
  trim: Float = 0
  cropFocus: ImageCropFocus = ATTENTION
  fit: ImageFit = COVER
}

type ImageSharpOriginal {
  width: Float
  height: Float
  src: String
}

type ImageSharpResize {
  src: String
  tracedSVG: String
  width: Int
  height: Int
  aspectRatio: Float
  originalName: String
}

type SitePlugin implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  resolve: String
  name: String
  version: String
  pluginOptions: SitePluginPluginOptions
  nodeAPIs: [String]
  browserAPIs: [String]
  ssrAPIs: [String]
  pluginFilepath: String
  packageJson: SitePluginPackageJson
}

type SitePluginPluginOptions {
  dataset: String
  projectId: String
  token: String
  watchMode: Boolean
  overlayDrafts: Boolean
  isTSX: Boolean
  jsxPragma: String
  allExtensions: Boolean
  src: String
  generated: String
  types: String
  api: String
  components: String
  containers: String
  gatsby: String
  hooks: String
  layouts: String
  lib: String
  pages: String
  styles: String
  templates: String
  preset: SitePluginPluginOptionsPreset
  defaults: SitePluginPluginOptionsDefaults
  base64Width: Int
  stripMetadata: Boolean
  defaultQuality: Int
  failOnError: Boolean
  siteUrl: String
  stripQueryString: Boolean
  outputPath: String
  emitSchema: SitePluginPluginOptionsEmitSchema
  emitPluginDocuments: SitePluginPluginOptionsEmitPluginDocuments
  path: String
  pathCheck: Boolean
}

type SitePluginPluginOptionsPreset {
  space: [Int]
  fonts: SitePluginPluginOptionsPresetFonts
  fontSizes: [Int]
  fontWeights: SitePluginPluginOptionsPresetFontWeights
  lineHeights: SitePluginPluginOptionsPresetLineHeights
  colors: SitePluginPluginOptionsPresetColors
  styles: SitePluginPluginOptionsPresetStyles
}

type SitePluginPluginOptionsPresetFonts {
  body: String
  heading: String
  monospace: String
}

type SitePluginPluginOptionsPresetFontWeights {
  body: Int
  heading: Int
  bold: Int
}

type SitePluginPluginOptionsPresetLineHeights {
  body: Float
  heading: Float
}

type SitePluginPluginOptionsPresetColors {
  text: String
  background: String
  primary: String
  secondary: String
  muted: String
}

type SitePluginPluginOptionsPresetStyles {
  root: SitePluginPluginOptionsPresetStylesRoot
  h1: SitePluginPluginOptionsPresetStylesH1
  h2: SitePluginPluginOptionsPresetStylesH2
  h3: SitePluginPluginOptionsPresetStylesH3
  h4: SitePluginPluginOptionsPresetStylesH4
  h5: SitePluginPluginOptionsPresetStylesH5
  h6: SitePluginPluginOptionsPresetStylesH6
  p: SitePluginPluginOptionsPresetStylesP
  a: SitePluginPluginOptionsPresetStylesA
  pre: SitePluginPluginOptionsPresetStylesPre
  code: SitePluginPluginOptionsPresetStylesCode
  table: SitePluginPluginOptionsPresetStylesTable
  th: SitePluginPluginOptionsPresetStylesTh
  td: SitePluginPluginOptionsPresetStylesTd
  img: SitePluginPluginOptionsPresetStylesImg
}

type SitePluginPluginOptionsPresetStylesRoot {
  fontFamily: String
  lineHeight: String
  fontWeight: String
}

type SitePluginPluginOptionsPresetStylesH1 {
  color: String
  fontFamily: String
  lineHeight: String
  fontWeight: String
  fontSize: Int
}

type SitePluginPluginOptionsPresetStylesH2 {
  color: String
  fontFamily: String
  lineHeight: String
  fontWeight: String
  fontSize: Int
}

type SitePluginPluginOptionsPresetStylesH3 {
  color: String
  fontFamily: String
  lineHeight: String
  fontWeight: String
  fontSize: Int
}

type SitePluginPluginOptionsPresetStylesH4 {
  color: String
  fontFamily: String
  lineHeight: String
  fontWeight: String
  fontSize: Int
}

type SitePluginPluginOptionsPresetStylesH5 {
  color: String
  fontFamily: String
  lineHeight: String
  fontWeight: String
  fontSize: Int
}

type SitePluginPluginOptionsPresetStylesH6 {
  color: String
  fontFamily: String
  lineHeight: String
  fontWeight: String
  fontSize: Int
}

type SitePluginPluginOptionsPresetStylesP {
  color: String
  fontFamily: String
  fontWeight: String
  lineHeight: String
}

type SitePluginPluginOptionsPresetStylesA {
  color: String
}

type SitePluginPluginOptionsPresetStylesPre {
  fontFamily: String
  overflowX: String
  code: SitePluginPluginOptionsPresetStylesPreCode
}

type SitePluginPluginOptionsPresetStylesPreCode {
  color: String
}

type SitePluginPluginOptionsPresetStylesCode {
  fontFamily: String
  fontSize: String
}

type SitePluginPluginOptionsPresetStylesTable {
  width: String
  borderCollapse: String
  borderSpacing: Int
}

type SitePluginPluginOptionsPresetStylesTh {
  textAlign: String
  borderBottomStyle: String
}

type SitePluginPluginOptionsPresetStylesTd {
  textAlign: String
  borderBottomStyle: String
}

type SitePluginPluginOptionsPresetStylesImg {
  maxWidth: String
}

type SitePluginPluginOptionsDefaults {
  formats: [String]
  placeholder: String
  quality: Int
  breakpoints: [Int]
  backgroundColor: String
}

type SitePluginPluginOptionsEmitSchema {
  _xgeneratedxxxgatsbyxschemaxgraphql: Boolean
  _xgeneratedxxxgatsbyxintrospectionxjson: Boolean
}

type SitePluginPluginOptionsEmitPluginDocuments {
  _xgeneratedxxxgatsbyxpluginxdocumentsxgraphql: Boolean
}

type SitePluginPackageJson {
  name: String
  description: String
  version: String
  main: String
  license: String
  dependencies: [SitePluginPackageJsonDependencies]
  devDependencies: [SitePluginPackageJsonDevDependencies]
  peerDependencies: [SitePluginPackageJsonPeerDependencies]
  keywords: [String]
}

type SitePluginPackageJsonDependencies {
  name: String
  version: String
}

type SitePluginPackageJsonDevDependencies {
  name: String
  version: String
}

type SitePluginPackageJsonPeerDependencies {
  name: String
  version: String
}

type SiteBuildMetadata implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  buildTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
}

type Query {
  file(sourceInstanceName: StringQueryOperatorInput, absolutePath: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, extension: StringQueryOperatorInput, size: IntQueryOperatorInput, prettySize: StringQueryOperatorInput, modifiedTime: DateQueryOperatorInput, accessTime: DateQueryOperatorInput, changeTime: DateQueryOperatorInput, birthTime: DateQueryOperatorInput, root: StringQueryOperatorInput, dir: StringQueryOperatorInput, base: StringQueryOperatorInput, ext: StringQueryOperatorInput, name: StringQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, dev: IntQueryOperatorInput, mode: IntQueryOperatorInput, nlink: IntQueryOperatorInput, uid: IntQueryOperatorInput, gid: IntQueryOperatorInput, rdev: IntQueryOperatorInput, ino: FloatQueryOperatorInput, atimeMs: FloatQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, atime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, ctime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, childrenImageSharp: ImageSharpFilterListInput, childImageSharp: ImageSharpFilterInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): File
  allFile(filter: FileFilterInput, sort: FileSortInput, skip: Int, limit: Int): FileConnection!
  directory(sourceInstanceName: StringQueryOperatorInput, absolutePath: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, extension: StringQueryOperatorInput, size: IntQueryOperatorInput, prettySize: StringQueryOperatorInput, modifiedTime: DateQueryOperatorInput, accessTime: DateQueryOperatorInput, changeTime: DateQueryOperatorInput, birthTime: DateQueryOperatorInput, root: StringQueryOperatorInput, dir: StringQueryOperatorInput, base: StringQueryOperatorInput, ext: StringQueryOperatorInput, name: StringQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, dev: IntQueryOperatorInput, mode: IntQueryOperatorInput, nlink: IntQueryOperatorInput, uid: IntQueryOperatorInput, gid: IntQueryOperatorInput, rdev: IntQueryOperatorInput, ino: FloatQueryOperatorInput, atimeMs: FloatQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, atime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, ctime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): Directory
  allDirectory(filter: DirectoryFilterInput, sort: DirectorySortInput, skip: Int, limit: Int): DirectoryConnection!
  site(buildTime: DateQueryOperatorInput, siteMetadata: SiteSiteMetadataFilterInput, port: IntQueryOperatorInput, host: StringQueryOperatorInput, polyfill: BooleanQueryOperatorInput, pathPrefix: StringQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): Site
  allSite(filter: SiteFilterInput, sort: SiteSortInput, skip: Int, limit: Int): SiteConnection!
  siteFunction(functionRoute: StringQueryOperatorInput, pluginName: StringQueryOperatorInput, originalAbsoluteFilePath: StringQueryOperatorInput, originalRelativeFilePath: StringQueryOperatorInput, relativeCompiledFilePath: StringQueryOperatorInput, absoluteCompiledFilePath: StringQueryOperatorInput, matchPath: StringQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): SiteFunction
  allSiteFunction(filter: SiteFunctionFilterInput, sort: SiteFunctionSortInput, skip: Int, limit: Int): SiteFunctionConnection!
  sitePage(path: StringQueryOperatorInput, component: StringQueryOperatorInput, internalComponentName: StringQueryOperatorInput, componentChunkName: StringQueryOperatorInput, matchPath: StringQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput, isCreatedByStatefulCreatePages: BooleanQueryOperatorInput, context: SitePageContextFilterInput, pluginCreator: SitePluginFilterInput, pluginCreatorId: StringQueryOperatorInput): SitePage
  allSitePage(filter: SitePageFilterInput, sort: SitePageSortInput, skip: Int, limit: Int): SitePageConnection!
  sanityAuthor(_id: StringQueryOperatorInput, _type: StringQueryOperatorInput, _createdAt: DateQueryOperatorInput, _updatedAt: DateQueryOperatorInput, _rev: StringQueryOperatorInput, _key: StringQueryOperatorInput, name: StringQueryOperatorInput, slug: SanitySlugFilterInput, image: SanityMainImageFilterInput, bio: SanityBlockFilterListInput, _rawSlug: JSONQueryOperatorInput, _rawImage: JSONQueryOperatorInput, _rawBio: JSONQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): SanityAuthor
  allSanityAuthor(filter: SanityAuthorFilterInput, sort: SanityAuthorSortInput, skip: Int, limit: Int): SanityAuthorConnection!
  sanityCategory(_id: StringQueryOperatorInput, _type: StringQueryOperatorInput, _createdAt: DateQueryOperatorInput, _updatedAt: DateQueryOperatorInput, _rev: StringQueryOperatorInput, _key: StringQueryOperatorInput, title: StringQueryOperatorInput, description: StringQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): SanityCategory
  allSanityCategory(filter: SanityCategoryFilterInput, sort: SanityCategorySortInput, skip: Int, limit: Int): SanityCategoryConnection!
  sanityPost(_id: StringQueryOperatorInput, _type: StringQueryOperatorInput, _createdAt: DateQueryOperatorInput, _updatedAt: DateQueryOperatorInput, _rev: StringQueryOperatorInput, _key: StringQueryOperatorInput, title: StringQueryOperatorInput, slug: SanitySlugFilterInput, publishedAt: DateQueryOperatorInput, mainImage: SanityMainImageFilterInput, authors: SanityAuthorReferenceFilterListInput, categories: SanityCategoryFilterListInput, excerpt: SanityBlockFilterListInput, body: SanityBlockFilterListInput, _rawSlug: JSONQueryOperatorInput, _rawMainImage: JSONQueryOperatorInput, _rawExcerpt: JSONQueryOperatorInput, _rawAuthors: JSONQueryOperatorInput, _rawCategories: JSONQueryOperatorInput, _rawBody: JSONQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): SanityPost
  allSanityPost(filter: SanityPostFilterInput, sort: SanityPostSortInput, skip: Int, limit: Int): SanityPostConnection!
  sanityFileAsset(_id: StringQueryOperatorInput, _type: StringQueryOperatorInput, _createdAt: DateQueryOperatorInput, _updatedAt: DateQueryOperatorInput, _rev: StringQueryOperatorInput, _key: StringQueryOperatorInput, originalFilename: StringQueryOperatorInput, label: StringQueryOperatorInput, title: StringQueryOperatorInput, description: StringQueryOperatorInput, altText: StringQueryOperatorInput, sha1hash: StringQueryOperatorInput, extension: StringQueryOperatorInput, mimeType: StringQueryOperatorInput, size: FloatQueryOperatorInput, assetId: StringQueryOperatorInput, path: StringQueryOperatorInput, url: StringQueryOperatorInput, source: SanityAssetSourceDataFilterInput, _rawSource: JSONQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): SanityFileAsset
  allSanityFileAsset(filter: SanityFileAssetFilterInput, sort: SanityFileAssetSortInput, skip: Int, limit: Int): SanityFileAssetConnection!
  sanityImageAsset(_id: StringQueryOperatorInput, _type: StringQueryOperatorInput, _createdAt: DateQueryOperatorInput, _updatedAt: DateQueryOperatorInput, _rev: StringQueryOperatorInput, _key: StringQueryOperatorInput, originalFilename: StringQueryOperatorInput, label: StringQueryOperatorInput, title: StringQueryOperatorInput, description: StringQueryOperatorInput, altText: StringQueryOperatorInput, sha1hash: StringQueryOperatorInput, extension: StringQueryOperatorInput, mimeType: StringQueryOperatorInput, size: FloatQueryOperatorInput, assetId: StringQueryOperatorInput, path: StringQueryOperatorInput, url: StringQueryOperatorInput, metadata: SanityImageMetadataFilterInput, source: SanityAssetSourceDataFilterInput, _rawMetadata: JSONQueryOperatorInput, _rawSource: JSONQueryOperatorInput, gatsbyImageData: JSONQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): SanityImageAsset
  allSanityImageAsset(filter: SanityImageAssetFilterInput, sort: SanityImageAssetSortInput, skip: Int, limit: Int): SanityImageAssetConnection!
  sanitySiteSettings(_id: StringQueryOperatorInput, _type: StringQueryOperatorInput, _createdAt: DateQueryOperatorInput, _updatedAt: DateQueryOperatorInput, _rev: StringQueryOperatorInput, _key: StringQueryOperatorInput, title: StringQueryOperatorInput, description: StringQueryOperatorInput, keywords: StringQueryOperatorInput, author: SanityAuthorFilterInput, _rawAuthor: JSONQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): SanitySiteSettings
  allSanitySiteSettings(filter: SanitySiteSettingsFilterInput, sort: SanitySiteSettingsSortInput, skip: Int, limit: Int): SanitySiteSettingsConnection!
  themeUiConfig(preset: JSONQueryOperatorInput, prismPreset: JSONQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): ThemeUiConfig
  allThemeUiConfig(filter: ThemeUiConfigFilterInput, sort: ThemeUiConfigSortInput, skip: Int, limit: Int): ThemeUiConfigConnection!
  imageSharp(fixed: ImageSharpFixedFilterInput, fluid: ImageSharpFluidFilterInput, gatsbyImageData: JSONQueryOperatorInput, original: ImageSharpOriginalFilterInput, resize: ImageSharpResizeFilterInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): ImageSharp
  allImageSharp(filter: ImageSharpFilterInput, sort: ImageSharpSortInput, skip: Int, limit: Int): ImageSharpConnection!
  sitePlugin(id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput, resolve: StringQueryOperatorInput, name: StringQueryOperatorInput, version: StringQueryOperatorInput, pluginOptions: SitePluginPluginOptionsFilterInput, nodeAPIs: StringQueryOperatorInput, browserAPIs: StringQueryOperatorInput, ssrAPIs: StringQueryOperatorInput, pluginFilepath: StringQueryOperatorInput, packageJson: SitePluginPackageJsonFilterInput): SitePlugin
  allSitePlugin(filter: SitePluginFilterInput, sort: SitePluginSortInput, skip: Int, limit: Int): SitePluginConnection!
  siteBuildMetadata(id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput, buildTime: DateQueryOperatorInput): SiteBuildMetadata
  allSiteBuildMetadata(filter: SiteBuildMetadataFilterInput, sort: SiteBuildMetadataSortInput, skip: Int, limit: Int): SiteBuildMetadataConnection!
}

input StringQueryOperatorInput {
  eq: String
  ne: String
  in: [String]
  nin: [String]
  regex: String
  glob: String
}

input IntQueryOperatorInput {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input DateQueryOperatorInput {
  eq: Date
  ne: Date
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  in: [Date]
  nin: [Date]
}

input FloatQueryOperatorInput {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input ImageSharpFilterListInput {
  elemMatch: ImageSharpFilterInput
}

input ImageSharpFilterInput {
  fixed: ImageSharpFixedFilterInput
  fluid: ImageSharpFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  original: ImageSharpOriginalFilterInput
  resize: ImageSharpResizeFilterInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input ImageSharpFixedFilterInput {
  base64: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  aspectRatio: FloatQueryOperatorInput
  width: FloatQueryOperatorInput
  height: FloatQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  originalName: StringQueryOperatorInput
}

input ImageSharpFluidFilterInput {
  base64: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  aspectRatio: FloatQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  sizes: StringQueryOperatorInput
  originalImg: StringQueryOperatorInput
  originalName: StringQueryOperatorInput
  presentationWidth: IntQueryOperatorInput
  presentationHeight: IntQueryOperatorInput
}

input JSONQueryOperatorInput {
  eq: JSON
  ne: JSON
  in: [JSON]
  nin: [JSON]
  regex: JSON
  glob: JSON
}

input ImageSharpOriginalFilterInput {
  width: FloatQueryOperatorInput
  height: FloatQueryOperatorInput
  src: StringQueryOperatorInput
}

input ImageSharpResizeFilterInput {
  src: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  width: IntQueryOperatorInput
  height: IntQueryOperatorInput
  aspectRatio: FloatQueryOperatorInput
  originalName: StringQueryOperatorInput
}

input NodeFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input NodeFilterListInput {
  elemMatch: NodeFilterInput
}

input InternalFilterInput {
  content: StringQueryOperatorInput
  contentDigest: StringQueryOperatorInput
  description: StringQueryOperatorInput
  fieldOwners: StringQueryOperatorInput
  ignoreType: BooleanQueryOperatorInput
  mediaType: StringQueryOperatorInput
  owner: StringQueryOperatorInput
  type: StringQueryOperatorInput
}

input BooleanQueryOperatorInput {
  eq: Boolean
  ne: Boolean
  in: [Boolean]
  nin: [Boolean]
}

type FileConnection {
  totalCount: Int!
  edges: [FileEdge!]!
  nodes: [File!]!
  pageInfo: PageInfo!
  distinct(field: FileFieldsEnum!): [String!]!
  max(field: FileFieldsEnum!): Float
  min(field: FileFieldsEnum!): Float
  sum(field: FileFieldsEnum!): Float
  group(skip: Int, limit: Int, field: FileFieldsEnum!): [FileGroupConnection!]!
}

type FileEdge {
  next: File
  node: File!
  previous: File
}

type PageInfo {
  currentPage: Int!
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  itemCount: Int!
  pageCount: Int!
  perPage: Int
  totalCount: Int!
}

enum FileFieldsEnum {
  sourceInstanceName
  absolutePath
  relativePath
  extension
  size
  prettySize
  modifiedTime
  accessTime
  changeTime
  birthTime
  root
  dir
  base
  ext
  name
  relativeDirectory
  dev
  mode
  nlink
  uid
  gid
  rdev
  ino
  atimeMs
  mtimeMs
  ctimeMs
  atime
  mtime
  ctime
  birthtime
  birthtimeMs
  childrenImageSharp
  childrenImageSharp___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___originalImg @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___presentationWidth @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___presentationHeight @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___original___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___original___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___original___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___resize___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___resize___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___resize___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___resize___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___resize___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___resize___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___originalImg @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___presentationWidth @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___presentationHeight @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___original___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___original___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___original___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type FileGroupConnection {
  totalCount: Int!
  edges: [FileEdge!]!
  nodes: [File!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input FileFilterInput {
  sourceInstanceName: StringQueryOperatorInput
  absolutePath: StringQueryOperatorInput
  relativePath: StringQueryOperatorInput
  extension: StringQueryOperatorInput
  size: IntQueryOperatorInput
  prettySize: StringQueryOperatorInput
  modifiedTime: DateQueryOperatorInput
  accessTime: DateQueryOperatorInput
  changeTime: DateQueryOperatorInput
  birthTime: DateQueryOperatorInput
  root: StringQueryOperatorInput
  dir: StringQueryOperatorInput
  base: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  name: StringQueryOperatorInput
  relativeDirectory: StringQueryOperatorInput
  dev: IntQueryOperatorInput
  mode: IntQueryOperatorInput
  nlink: IntQueryOperatorInput
  uid: IntQueryOperatorInput
  gid: IntQueryOperatorInput
  rdev: IntQueryOperatorInput
  ino: FloatQueryOperatorInput
  atimeMs: FloatQueryOperatorInput
  mtimeMs: FloatQueryOperatorInput
  ctimeMs: FloatQueryOperatorInput
  atime: DateQueryOperatorInput
  mtime: DateQueryOperatorInput
  ctime: DateQueryOperatorInput
  birthtime: DateQueryOperatorInput
  birthtimeMs: FloatQueryOperatorInput
  childrenImageSharp: ImageSharpFilterListInput
  childImageSharp: ImageSharpFilterInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input FileSortInput {
  fields: [FileFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

enum SortOrderEnum {
  ASC
  DESC
}

type DirectoryConnection {
  totalCount: Int!
  edges: [DirectoryEdge!]!
  nodes: [Directory!]!
  pageInfo: PageInfo!
  distinct(field: DirectoryFieldsEnum!): [String!]!
  max(field: DirectoryFieldsEnum!): Float
  min(field: DirectoryFieldsEnum!): Float
  sum(field: DirectoryFieldsEnum!): Float
  group(skip: Int, limit: Int, field: DirectoryFieldsEnum!): [DirectoryGroupConnection!]!
}

type DirectoryEdge {
  next: Directory
  node: Directory!
  previous: Directory
}

enum DirectoryFieldsEnum {
  sourceInstanceName
  absolutePath
  relativePath
  extension
  size
  prettySize
  modifiedTime
  accessTime
  changeTime
  birthTime
  root
  dir
  base
  ext
  name
  relativeDirectory
  dev
  mode
  nlink
  uid
  gid
  rdev
  ino
  atimeMs
  mtimeMs
  ctimeMs
  atime
  mtime
  ctime
  birthtime
  birthtimeMs
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type DirectoryGroupConnection {
  totalCount: Int!
  edges: [DirectoryEdge!]!
  nodes: [Directory!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input DirectoryFilterInput {
  sourceInstanceName: StringQueryOperatorInput
  absolutePath: StringQueryOperatorInput
  relativePath: StringQueryOperatorInput
  extension: StringQueryOperatorInput
  size: IntQueryOperatorInput
  prettySize: StringQueryOperatorInput
  modifiedTime: DateQueryOperatorInput
  accessTime: DateQueryOperatorInput
  changeTime: DateQueryOperatorInput
  birthTime: DateQueryOperatorInput
  root: StringQueryOperatorInput
  dir: StringQueryOperatorInput
  base: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  name: StringQueryOperatorInput
  relativeDirectory: StringQueryOperatorInput
  dev: IntQueryOperatorInput
  mode: IntQueryOperatorInput
  nlink: IntQueryOperatorInput
  uid: IntQueryOperatorInput
  gid: IntQueryOperatorInput
  rdev: IntQueryOperatorInput
  ino: FloatQueryOperatorInput
  atimeMs: FloatQueryOperatorInput
  mtimeMs: FloatQueryOperatorInput
  ctimeMs: FloatQueryOperatorInput
  atime: DateQueryOperatorInput
  mtime: DateQueryOperatorInput
  ctime: DateQueryOperatorInput
  birthtime: DateQueryOperatorInput
  birthtimeMs: FloatQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input DirectorySortInput {
  fields: [DirectoryFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input SiteSiteMetadataFilterInput {
  title: StringQueryOperatorInput
  description: StringQueryOperatorInput
  keywords: StringQueryOperatorInput
  siteUrl: StringQueryOperatorInput
  author: SiteSiteMetadataAuthorFilterInput
  social: SiteSiteMetadataSocialFilterListInput
}

input SiteSiteMetadataAuthorFilterInput {
  name: StringQueryOperatorInput
  url: StringQueryOperatorInput
  email: StringQueryOperatorInput
}

input SiteSiteMetadataSocialFilterListInput {
  elemMatch: SiteSiteMetadataSocialFilterInput
}

input SiteSiteMetadataSocialFilterInput {
  name: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type SiteConnection {
  totalCount: Int!
  edges: [SiteEdge!]!
  nodes: [Site!]!
  pageInfo: PageInfo!
  distinct(field: SiteFieldsEnum!): [String!]!
  max(field: SiteFieldsEnum!): Float
  min(field: SiteFieldsEnum!): Float
  sum(field: SiteFieldsEnum!): Float
  group(skip: Int, limit: Int, field: SiteFieldsEnum!): [SiteGroupConnection!]!
}

type SiteEdge {
  next: Site
  node: Site!
  previous: Site
}

enum SiteFieldsEnum {
  buildTime
  siteMetadata___title
  siteMetadata___description
  siteMetadata___keywords
  siteMetadata___siteUrl
  siteMetadata___author___name
  siteMetadata___author___url
  siteMetadata___author___email
  siteMetadata___social
  siteMetadata___social___name
  siteMetadata___social___url
  port
  host
  polyfill
  pathPrefix
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type SiteGroupConnection {
  totalCount: Int!
  edges: [SiteEdge!]!
  nodes: [Site!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input SiteFilterInput {
  buildTime: DateQueryOperatorInput
  siteMetadata: SiteSiteMetadataFilterInput
  port: IntQueryOperatorInput
  host: StringQueryOperatorInput
  polyfill: BooleanQueryOperatorInput
  pathPrefix: StringQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input SiteSortInput {
  fields: [SiteFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type SiteFunctionConnection {
  totalCount: Int!
  edges: [SiteFunctionEdge!]!
  nodes: [SiteFunction!]!
  pageInfo: PageInfo!
  distinct(field: SiteFunctionFieldsEnum!): [String!]!
  max(field: SiteFunctionFieldsEnum!): Float
  min(field: SiteFunctionFieldsEnum!): Float
  sum(field: SiteFunctionFieldsEnum!): Float
  group(skip: Int, limit: Int, field: SiteFunctionFieldsEnum!): [SiteFunctionGroupConnection!]!
}

type SiteFunctionEdge {
  next: SiteFunction
  node: SiteFunction!
  previous: SiteFunction
}

enum SiteFunctionFieldsEnum {
  functionRoute
  pluginName
  originalAbsoluteFilePath
  originalRelativeFilePath
  relativeCompiledFilePath
  absoluteCompiledFilePath
  matchPath
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type SiteFunctionGroupConnection {
  totalCount: Int!
  edges: [SiteFunctionEdge!]!
  nodes: [SiteFunction!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input SiteFunctionFilterInput {
  functionRoute: StringQueryOperatorInput
  pluginName: StringQueryOperatorInput
  originalAbsoluteFilePath: StringQueryOperatorInput
  originalRelativeFilePath: StringQueryOperatorInput
  relativeCompiledFilePath: StringQueryOperatorInput
  absoluteCompiledFilePath: StringQueryOperatorInput
  matchPath: StringQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input SiteFunctionSortInput {
  fields: [SiteFunctionFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input SitePageContextFilterInput {
  id: StringQueryOperatorInput
}

input SitePluginFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
  resolve: StringQueryOperatorInput
  name: StringQueryOperatorInput
  version: StringQueryOperatorInput
  pluginOptions: SitePluginPluginOptionsFilterInput
  nodeAPIs: StringQueryOperatorInput
  browserAPIs: StringQueryOperatorInput
  ssrAPIs: StringQueryOperatorInput
  pluginFilepath: StringQueryOperatorInput
  packageJson: SitePluginPackageJsonFilterInput
}

input SitePluginPluginOptionsFilterInput {
  dataset: StringQueryOperatorInput
  projectId: StringQueryOperatorInput
  token: StringQueryOperatorInput
  watchMode: BooleanQueryOperatorInput
  overlayDrafts: BooleanQueryOperatorInput
  isTSX: BooleanQueryOperatorInput
  jsxPragma: StringQueryOperatorInput
  allExtensions: BooleanQueryOperatorInput
  src: StringQueryOperatorInput
  generated: StringQueryOperatorInput
  types: StringQueryOperatorInput
  api: StringQueryOperatorInput
  components: StringQueryOperatorInput
  containers: StringQueryOperatorInput
  gatsby: StringQueryOperatorInput
  hooks: StringQueryOperatorInput
  layouts: StringQueryOperatorInput
  lib: StringQueryOperatorInput
  pages: StringQueryOperatorInput
  styles: StringQueryOperatorInput
  templates: StringQueryOperatorInput
  preset: SitePluginPluginOptionsPresetFilterInput
  defaults: SitePluginPluginOptionsDefaultsFilterInput
  base64Width: IntQueryOperatorInput
  stripMetadata: BooleanQueryOperatorInput
  defaultQuality: IntQueryOperatorInput
  failOnError: BooleanQueryOperatorInput
  siteUrl: StringQueryOperatorInput
  stripQueryString: BooleanQueryOperatorInput
  outputPath: StringQueryOperatorInput
  emitSchema: SitePluginPluginOptionsEmitSchemaFilterInput
  emitPluginDocuments: SitePluginPluginOptionsEmitPluginDocumentsFilterInput
  path: StringQueryOperatorInput
  pathCheck: BooleanQueryOperatorInput
}

input SitePluginPluginOptionsPresetFilterInput {
  space: IntQueryOperatorInput
  fonts: SitePluginPluginOptionsPresetFontsFilterInput
  fontSizes: IntQueryOperatorInput
  fontWeights: SitePluginPluginOptionsPresetFontWeightsFilterInput
  lineHeights: SitePluginPluginOptionsPresetLineHeightsFilterInput
  colors: SitePluginPluginOptionsPresetColorsFilterInput
  styles: SitePluginPluginOptionsPresetStylesFilterInput
}

input SitePluginPluginOptionsPresetFontsFilterInput {
  body: StringQueryOperatorInput
  heading: StringQueryOperatorInput
  monospace: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetFontWeightsFilterInput {
  body: IntQueryOperatorInput
  heading: IntQueryOperatorInput
  bold: IntQueryOperatorInput
}

input SitePluginPluginOptionsPresetLineHeightsFilterInput {
  body: FloatQueryOperatorInput
  heading: FloatQueryOperatorInput
}

input SitePluginPluginOptionsPresetColorsFilterInput {
  text: StringQueryOperatorInput
  background: StringQueryOperatorInput
  primary: StringQueryOperatorInput
  secondary: StringQueryOperatorInput
  muted: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetStylesFilterInput {
  root: SitePluginPluginOptionsPresetStylesRootFilterInput
  h1: SitePluginPluginOptionsPresetStylesH1FilterInput
  h2: SitePluginPluginOptionsPresetStylesH2FilterInput
  h3: SitePluginPluginOptionsPresetStylesH3FilterInput
  h4: SitePluginPluginOptionsPresetStylesH4FilterInput
  h5: SitePluginPluginOptionsPresetStylesH5FilterInput
  h6: SitePluginPluginOptionsPresetStylesH6FilterInput
  p: SitePluginPluginOptionsPresetStylesPFilterInput
  a: SitePluginPluginOptionsPresetStylesAFilterInput
  pre: SitePluginPluginOptionsPresetStylesPreFilterInput
  code: SitePluginPluginOptionsPresetStylesCodeFilterInput
  table: SitePluginPluginOptionsPresetStylesTableFilterInput
  th: SitePluginPluginOptionsPresetStylesThFilterInput
  td: SitePluginPluginOptionsPresetStylesTdFilterInput
  img: SitePluginPluginOptionsPresetStylesImgFilterInput
}

input SitePluginPluginOptionsPresetStylesRootFilterInput {
  fontFamily: StringQueryOperatorInput
  lineHeight: StringQueryOperatorInput
  fontWeight: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetStylesH1FilterInput {
  color: StringQueryOperatorInput
  fontFamily: StringQueryOperatorInput
  lineHeight: StringQueryOperatorInput
  fontWeight: StringQueryOperatorInput
  fontSize: IntQueryOperatorInput
}

input SitePluginPluginOptionsPresetStylesH2FilterInput {
  color: StringQueryOperatorInput
  fontFamily: StringQueryOperatorInput
  lineHeight: StringQueryOperatorInput
  fontWeight: StringQueryOperatorInput
  fontSize: IntQueryOperatorInput
}

input SitePluginPluginOptionsPresetStylesH3FilterInput {
  color: StringQueryOperatorInput
  fontFamily: StringQueryOperatorInput
  lineHeight: StringQueryOperatorInput
  fontWeight: StringQueryOperatorInput
  fontSize: IntQueryOperatorInput
}

input SitePluginPluginOptionsPresetStylesH4FilterInput {
  color: StringQueryOperatorInput
  fontFamily: StringQueryOperatorInput
  lineHeight: StringQueryOperatorInput
  fontWeight: StringQueryOperatorInput
  fontSize: IntQueryOperatorInput
}

input SitePluginPluginOptionsPresetStylesH5FilterInput {
  color: StringQueryOperatorInput
  fontFamily: StringQueryOperatorInput
  lineHeight: StringQueryOperatorInput
  fontWeight: StringQueryOperatorInput
  fontSize: IntQueryOperatorInput
}

input SitePluginPluginOptionsPresetStylesH6FilterInput {
  color: StringQueryOperatorInput
  fontFamily: StringQueryOperatorInput
  lineHeight: StringQueryOperatorInput
  fontWeight: StringQueryOperatorInput
  fontSize: IntQueryOperatorInput
}

input SitePluginPluginOptionsPresetStylesPFilterInput {
  color: StringQueryOperatorInput
  fontFamily: StringQueryOperatorInput
  fontWeight: StringQueryOperatorInput
  lineHeight: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetStylesAFilterInput {
  color: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetStylesPreFilterInput {
  fontFamily: StringQueryOperatorInput
  overflowX: StringQueryOperatorInput
  code: SitePluginPluginOptionsPresetStylesPreCodeFilterInput
}

input SitePluginPluginOptionsPresetStylesPreCodeFilterInput {
  color: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetStylesCodeFilterInput {
  fontFamily: StringQueryOperatorInput
  fontSize: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetStylesTableFilterInput {
  width: StringQueryOperatorInput
  borderCollapse: StringQueryOperatorInput
  borderSpacing: IntQueryOperatorInput
}

input SitePluginPluginOptionsPresetStylesThFilterInput {
  textAlign: StringQueryOperatorInput
  borderBottomStyle: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetStylesTdFilterInput {
  textAlign: StringQueryOperatorInput
  borderBottomStyle: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetStylesImgFilterInput {
  maxWidth: StringQueryOperatorInput
}

input SitePluginPluginOptionsDefaultsFilterInput {
  formats: StringQueryOperatorInput
  placeholder: StringQueryOperatorInput
  quality: IntQueryOperatorInput
  breakpoints: IntQueryOperatorInput
  backgroundColor: StringQueryOperatorInput
}

input SitePluginPluginOptionsEmitSchemaFilterInput {
  _xgeneratedxxxgatsbyxschemaxgraphql: BooleanQueryOperatorInput
  _xgeneratedxxxgatsbyxintrospectionxjson: BooleanQueryOperatorInput
}

input SitePluginPluginOptionsEmitPluginDocumentsFilterInput {
  _xgeneratedxxxgatsbyxpluginxdocumentsxgraphql: BooleanQueryOperatorInput
}

input SitePluginPackageJsonFilterInput {
  name: StringQueryOperatorInput
  description: StringQueryOperatorInput
  version: StringQueryOperatorInput
  main: StringQueryOperatorInput
  license: StringQueryOperatorInput
  dependencies: SitePluginPackageJsonDependenciesFilterListInput
  devDependencies: SitePluginPackageJsonDevDependenciesFilterListInput
  peerDependencies: SitePluginPackageJsonPeerDependenciesFilterListInput
  keywords: StringQueryOperatorInput
}

input SitePluginPackageJsonDependenciesFilterListInput {
  elemMatch: SitePluginPackageJsonDependenciesFilterInput
}

input SitePluginPackageJsonDependenciesFilterInput {
  name: StringQueryOperatorInput
  version: StringQueryOperatorInput
}

input SitePluginPackageJsonDevDependenciesFilterListInput {
  elemMatch: SitePluginPackageJsonDevDependenciesFilterInput
}

input SitePluginPackageJsonDevDependenciesFilterInput {
  name: StringQueryOperatorInput
  version: StringQueryOperatorInput
}

input SitePluginPackageJsonPeerDependenciesFilterListInput {
  elemMatch: SitePluginPackageJsonPeerDependenciesFilterInput
}

input SitePluginPackageJsonPeerDependenciesFilterInput {
  name: StringQueryOperatorInput
  version: StringQueryOperatorInput
}

type SitePageConnection {
  totalCount: Int!
  edges: [SitePageEdge!]!
  nodes: [SitePage!]!
  pageInfo: PageInfo!
  distinct(field: SitePageFieldsEnum!): [String!]!
  max(field: SitePageFieldsEnum!): Float
  min(field: SitePageFieldsEnum!): Float
  sum(field: SitePageFieldsEnum!): Float
  group(skip: Int, limit: Int, field: SitePageFieldsEnum!): [SitePageGroupConnection!]!
}

type SitePageEdge {
  next: SitePage
  node: SitePage!
  previous: SitePage
}

enum SitePageFieldsEnum {
  path
  component
  internalComponentName
  componentChunkName
  matchPath
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  isCreatedByStatefulCreatePages
  context___id
  pluginCreator___id
  pluginCreator___parent___id
  pluginCreator___parent___parent___id
  pluginCreator___parent___parent___children
  pluginCreator___parent___children
  pluginCreator___parent___children___id
  pluginCreator___parent___children___children
  pluginCreator___parent___internal___content
  pluginCreator___parent___internal___contentDigest
  pluginCreator___parent___internal___description
  pluginCreator___parent___internal___fieldOwners
  pluginCreator___parent___internal___ignoreType
  pluginCreator___parent___internal___mediaType
  pluginCreator___parent___internal___owner
  pluginCreator___parent___internal___type
  pluginCreator___children
  pluginCreator___children___id
  pluginCreator___children___parent___id
  pluginCreator___children___parent___children
  pluginCreator___children___children
  pluginCreator___children___children___id
  pluginCreator___children___children___children
  pluginCreator___children___internal___content
  pluginCreator___children___internal___contentDigest
  pluginCreator___children___internal___description
  pluginCreator___children___internal___fieldOwners
  pluginCreator___children___internal___ignoreType
  pluginCreator___children___internal___mediaType
  pluginCreator___children___internal___owner
  pluginCreator___children___internal___type
  pluginCreator___internal___content
  pluginCreator___internal___contentDigest
  pluginCreator___internal___description
  pluginCreator___internal___fieldOwners
  pluginCreator___internal___ignoreType
  pluginCreator___internal___mediaType
  pluginCreator___internal___owner
  pluginCreator___internal___type
  pluginCreator___resolve
  pluginCreator___name
  pluginCreator___version
  pluginCreator___pluginOptions___dataset
  pluginCreator___pluginOptions___projectId
  pluginCreator___pluginOptions___token
  pluginCreator___pluginOptions___watchMode
  pluginCreator___pluginOptions___overlayDrafts
  pluginCreator___pluginOptions___isTSX
  pluginCreator___pluginOptions___jsxPragma
  pluginCreator___pluginOptions___allExtensions
  pluginCreator___pluginOptions___src
  pluginCreator___pluginOptions___generated
  pluginCreator___pluginOptions___types
  pluginCreator___pluginOptions___api
  pluginCreator___pluginOptions___components
  pluginCreator___pluginOptions___containers
  pluginCreator___pluginOptions___gatsby
  pluginCreator___pluginOptions___hooks
  pluginCreator___pluginOptions___layouts
  pluginCreator___pluginOptions___lib
  pluginCreator___pluginOptions___pages
  pluginCreator___pluginOptions___styles
  pluginCreator___pluginOptions___templates
  pluginCreator___pluginOptions___preset___space
  pluginCreator___pluginOptions___preset___fontSizes
  pluginCreator___pluginOptions___defaults___formats
  pluginCreator___pluginOptions___defaults___placeholder
  pluginCreator___pluginOptions___defaults___quality
  pluginCreator___pluginOptions___defaults___breakpoints
  pluginCreator___pluginOptions___defaults___backgroundColor
  pluginCreator___pluginOptions___base64Width
  pluginCreator___pluginOptions___stripMetadata
  pluginCreator___pluginOptions___defaultQuality
  pluginCreator___pluginOptions___failOnError
  pluginCreator___pluginOptions___siteUrl
  pluginCreator___pluginOptions___stripQueryString
  pluginCreator___pluginOptions___outputPath
  pluginCreator___pluginOptions___emitSchema____xgeneratedxxxgatsbyxschemaxgraphql
  pluginCreator___pluginOptions___emitSchema____xgeneratedxxxgatsbyxintrospectionxjson
  pluginCreator___pluginOptions___emitPluginDocuments____xgeneratedxxxgatsbyxpluginxdocumentsxgraphql
  pluginCreator___pluginOptions___path
  pluginCreator___pluginOptions___pathCheck
  pluginCreator___nodeAPIs
  pluginCreator___browserAPIs
  pluginCreator___ssrAPIs
  pluginCreator___pluginFilepath
  pluginCreator___packageJson___name
  pluginCreator___packageJson___description
  pluginCreator___packageJson___version
  pluginCreator___packageJson___main
  pluginCreator___packageJson___license
  pluginCreator___packageJson___dependencies
  pluginCreator___packageJson___dependencies___name
  pluginCreator___packageJson___dependencies___version
  pluginCreator___packageJson___devDependencies
  pluginCreator___packageJson___devDependencies___name
  pluginCreator___packageJson___devDependencies___version
  pluginCreator___packageJson___peerDependencies
  pluginCreator___packageJson___peerDependencies___name
  pluginCreator___packageJson___peerDependencies___version
  pluginCreator___packageJson___keywords
  pluginCreatorId
}

type SitePageGroupConnection {
  totalCount: Int!
  edges: [SitePageEdge!]!
  nodes: [SitePage!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input SitePageFilterInput {
  path: StringQueryOperatorInput
  component: StringQueryOperatorInput
  internalComponentName: StringQueryOperatorInput
  componentChunkName: StringQueryOperatorInput
  matchPath: StringQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
  isCreatedByStatefulCreatePages: BooleanQueryOperatorInput
  context: SitePageContextFilterInput
  pluginCreator: SitePluginFilterInput
  pluginCreatorId: StringQueryOperatorInput
}

input SitePageSortInput {
  fields: [SitePageFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input SanitySlugFilterInput {
  _key: StringQueryOperatorInput
  _type: StringQueryOperatorInput
  current: StringQueryOperatorInput
}

input SanityMainImageFilterInput {
  _key: StringQueryOperatorInput
  _type: StringQueryOperatorInput
  asset: SanityImageAssetFilterInput
  hotspot: SanityImageHotspotFilterInput
  crop: SanityImageCropFilterInput
  caption: StringQueryOperatorInput
  alt: StringQueryOperatorInput
  _rawAsset: JSONQueryOperatorInput
  _rawHotspot: JSONQueryOperatorInput
  _rawCrop: JSONQueryOperatorInput
}

input SanityImageAssetFilterInput {
  _id: StringQueryOperatorInput
  _type: StringQueryOperatorInput
  _createdAt: DateQueryOperatorInput
  _updatedAt: DateQueryOperatorInput
  _rev: StringQueryOperatorInput
  _key: StringQueryOperatorInput
  originalFilename: StringQueryOperatorInput
  label: StringQueryOperatorInput
  title: StringQueryOperatorInput
  description: StringQueryOperatorInput
  altText: StringQueryOperatorInput
  sha1hash: StringQueryOperatorInput
  extension: StringQueryOperatorInput
  mimeType: StringQueryOperatorInput
  size: FloatQueryOperatorInput
  assetId: StringQueryOperatorInput
  path: StringQueryOperatorInput
  url: StringQueryOperatorInput
  metadata: SanityImageMetadataFilterInput
  source: SanityAssetSourceDataFilterInput
  _rawMetadata: JSONQueryOperatorInput
  _rawSource: JSONQueryOperatorInput
  gatsbyImageData: JSONQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input SanityImageMetadataFilterInput {
  _key: StringQueryOperatorInput
  _type: StringQueryOperatorInput
  location: SanityGeopointFilterInput
  dimensions: SanityImageDimensionsFilterInput
  palette: SanityImagePaletteFilterInput
  lqip: StringQueryOperatorInput
  hasAlpha: BooleanQueryOperatorInput
  isOpaque: BooleanQueryOperatorInput
  _rawLocation: JSONQueryOperatorInput
  _rawDimensions: JSONQueryOperatorInput
  _rawPalette: JSONQueryOperatorInput
}

input SanityGeopointFilterInput {
  _key: StringQueryOperatorInput
  _type: StringQueryOperatorInput
  lat: FloatQueryOperatorInput
  lng: FloatQueryOperatorInput
  alt: FloatQueryOperatorInput
}

input SanityImageDimensionsFilterInput {
  _key: StringQueryOperatorInput
  _type: StringQueryOperatorInput
  height: FloatQueryOperatorInput
  width: FloatQueryOperatorInput
  aspectRatio: FloatQueryOperatorInput
}

input SanityImagePaletteFilterInput {
  _key: StringQueryOperatorInput
  _type: StringQueryOperatorInput
  darkMuted: SanityImagePaletteSwatchFilterInput
  lightVibrant: SanityImagePaletteSwatchFilterInput
  darkVibrant: SanityImagePaletteSwatchFilterInput
  vibrant: SanityImagePaletteSwatchFilterInput
  dominant: SanityImagePaletteSwatchFilterInput
  lightMuted: SanityImagePaletteSwatchFilterInput
  muted: SanityImagePaletteSwatchFilterInput
  _rawDarkMuted: JSONQueryOperatorInput
  _rawLightVibrant: JSONQueryOperatorInput
  _rawDarkVibrant: JSONQueryOperatorInput
  _rawVibrant: JSONQueryOperatorInput
  _rawDominant: JSONQueryOperatorInput
  _rawLightMuted: JSONQueryOperatorInput
  _rawMuted: JSONQueryOperatorInput
}

input SanityImagePaletteSwatchFilterInput {
  _key: StringQueryOperatorInput
  _type: StringQueryOperatorInput
  background: StringQueryOperatorInput
  foreground: StringQueryOperatorInput
  population: FloatQueryOperatorInput
  title: StringQueryOperatorInput
}

input SanityAssetSourceDataFilterInput {
  _key: StringQueryOperatorInput
  _type: StringQueryOperatorInput
  name: StringQueryOperatorInput
  id: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

input SanityImageHotspotFilterInput {
  _key: StringQueryOperatorInput
  _type: StringQueryOperatorInput
  x: FloatQueryOperatorInput
  y: FloatQueryOperatorInput
  height: FloatQueryOperatorInput
  width: FloatQueryOperatorInput
}

input SanityImageCropFilterInput {
  _key: StringQueryOperatorInput
  _type: StringQueryOperatorInput
  top: FloatQueryOperatorInput
  bottom: FloatQueryOperatorInput
  left: FloatQueryOperatorInput
  right: FloatQueryOperatorInput
}

input SanityBlockFilterListInput {
  elemMatch: SanityBlockFilterInput
}

input SanityBlockFilterInput {
  _key: StringQueryOperatorInput
  _type: StringQueryOperatorInput
  children: SanitySpanFilterListInput
  style: StringQueryOperatorInput
  list: StringQueryOperatorInput
  _rawChildren: JSONQueryOperatorInput
}

input SanitySpanFilterListInput {
  elemMatch: SanitySpanFilterInput
}

input SanitySpanFilterInput {
  _key: StringQueryOperatorInput
  _type: StringQueryOperatorInput
  marks: StringQueryOperatorInput
  text: StringQueryOperatorInput
}

type SanityAuthorConnection {
  totalCount: Int!
  edges: [SanityAuthorEdge!]!
  nodes: [SanityAuthor!]!
  pageInfo: PageInfo!
  distinct(field: SanityAuthorFieldsEnum!): [String!]!
  max(field: SanityAuthorFieldsEnum!): Float
  min(field: SanityAuthorFieldsEnum!): Float
  sum(field: SanityAuthorFieldsEnum!): Float
  group(skip: Int, limit: Int, field: SanityAuthorFieldsEnum!): [SanityAuthorGroupConnection!]!
}

type SanityAuthorEdge {
  next: SanityAuthor
  node: SanityAuthor!
  previous: SanityAuthor
}

enum SanityAuthorFieldsEnum {
  _id
  _type
  _createdAt
  _updatedAt
  _rev
  _key
  name
  slug____key
  slug____type
  slug___current
  image____key
  image____type
  image___asset____id
  image___asset____type
  image___asset____createdAt
  image___asset____updatedAt
  image___asset____rev
  image___asset____key
  image___asset___originalFilename
  image___asset___label
  image___asset___title
  image___asset___description
  image___asset___altText
  image___asset___sha1hash
  image___asset___extension
  image___asset___mimeType
  image___asset___size
  image___asset___assetId
  image___asset___path
  image___asset___url
  image___asset___metadata____key
  image___asset___metadata____type
  image___asset___metadata___lqip
  image___asset___metadata___hasAlpha
  image___asset___metadata___isOpaque
  image___asset___metadata____rawLocation
  image___asset___metadata____rawDimensions
  image___asset___metadata____rawPalette
  image___asset___source____key
  image___asset___source____type
  image___asset___source___name
  image___asset___source___id
  image___asset___source___url
  image___asset____rawMetadata
  image___asset____rawSource
  image___asset___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  image___asset___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  image___asset___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  image___asset___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  image___asset___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  image___asset___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  image___asset___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  image___asset___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  image___asset___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  image___asset___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  image___asset___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  image___asset___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  image___asset___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  image___asset___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  image___asset___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  image___hotspot____key
  image___hotspot____type
  image___hotspot___x
  image___hotspot___y
  image___hotspot___height
  image___hotspot___width
  image___crop____key
  image___crop____type
  image___crop___top
  image___crop___bottom
  image___crop___left
  image___crop___right
  image___caption
  image___alt
  image____rawAsset
  image____rawHotspot
  image____rawCrop
  bio
  bio____key
  bio____type
  bio___children
  bio___children____key
  bio___children____type
  bio___children___marks
  bio___children___text
  bio___style
  bio___list
  bio____rawChildren
  _rawSlug
  _rawImage
  _rawBio
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type SanityAuthorGroupConnection {
  totalCount: Int!
  edges: [SanityAuthorEdge!]!
  nodes: [SanityAuthor!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input SanityAuthorFilterInput {
  _id: StringQueryOperatorInput
  _type: StringQueryOperatorInput
  _createdAt: DateQueryOperatorInput
  _updatedAt: DateQueryOperatorInput
  _rev: StringQueryOperatorInput
  _key: StringQueryOperatorInput
  name: StringQueryOperatorInput
  slug: SanitySlugFilterInput
  image: SanityMainImageFilterInput
  bio: SanityBlockFilterListInput
  _rawSlug: JSONQueryOperatorInput
  _rawImage: JSONQueryOperatorInput
  _rawBio: JSONQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input SanityAuthorSortInput {
  fields: [SanityAuthorFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type SanityCategoryConnection {
  totalCount: Int!
  edges: [SanityCategoryEdge!]!
  nodes: [SanityCategory!]!
  pageInfo: PageInfo!
  distinct(field: SanityCategoryFieldsEnum!): [String!]!
  max(field: SanityCategoryFieldsEnum!): Float
  min(field: SanityCategoryFieldsEnum!): Float
  sum(field: SanityCategoryFieldsEnum!): Float
  group(skip: Int, limit: Int, field: SanityCategoryFieldsEnum!): [SanityCategoryGroupConnection!]!
}

type SanityCategoryEdge {
  next: SanityCategory
  node: SanityCategory!
  previous: SanityCategory
}

enum SanityCategoryFieldsEnum {
  _id
  _type
  _createdAt
  _updatedAt
  _rev
  _key
  title
  description
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type SanityCategoryGroupConnection {
  totalCount: Int!
  edges: [SanityCategoryEdge!]!
  nodes: [SanityCategory!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input SanityCategoryFilterInput {
  _id: StringQueryOperatorInput
  _type: StringQueryOperatorInput
  _createdAt: DateQueryOperatorInput
  _updatedAt: DateQueryOperatorInput
  _rev: StringQueryOperatorInput
  _key: StringQueryOperatorInput
  title: StringQueryOperatorInput
  description: StringQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input SanityCategorySortInput {
  fields: [SanityCategoryFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input SanityAuthorReferenceFilterListInput {
  elemMatch: SanityAuthorReferenceFilterInput
}

input SanityAuthorReferenceFilterInput {
  _key: StringQueryOperatorInput
  _type: StringQueryOperatorInput
  author: SanityAuthorFilterInput
  _rawAuthor: JSONQueryOperatorInput
}

input SanityCategoryFilterListInput {
  elemMatch: SanityCategoryFilterInput
}

type SanityPostConnection {
  totalCount: Int!
  edges: [SanityPostEdge!]!
  nodes: [SanityPost!]!
  pageInfo: PageInfo!
  distinct(field: SanityPostFieldsEnum!): [String!]!
  max(field: SanityPostFieldsEnum!): Float
  min(field: SanityPostFieldsEnum!): Float
  sum(field: SanityPostFieldsEnum!): Float
  group(skip: Int, limit: Int, field: SanityPostFieldsEnum!): [SanityPostGroupConnection!]!
}

type SanityPostEdge {
  next: SanityPost
  node: SanityPost!
  previous: SanityPost
}

enum SanityPostFieldsEnum {
  _id
  _type
  _createdAt
  _updatedAt
  _rev
  _key
  title
  slug____key
  slug____type
  slug___current
  publishedAt
  mainImage____key
  mainImage____type
  mainImage___asset____id
  mainImage___asset____type
  mainImage___asset____createdAt
  mainImage___asset____updatedAt
  mainImage___asset____rev
  mainImage___asset____key
  mainImage___asset___originalFilename
  mainImage___asset___label
  mainImage___asset___title
  mainImage___asset___description
  mainImage___asset___altText
  mainImage___asset___sha1hash
  mainImage___asset___extension
  mainImage___asset___mimeType
  mainImage___asset___size
  mainImage___asset___assetId
  mainImage___asset___path
  mainImage___asset___url
  mainImage___asset___metadata____key
  mainImage___asset___metadata____type
  mainImage___asset___metadata___lqip
  mainImage___asset___metadata___hasAlpha
  mainImage___asset___metadata___isOpaque
  mainImage___asset___metadata____rawLocation
  mainImage___asset___metadata____rawDimensions
  mainImage___asset___metadata____rawPalette
  mainImage___asset___source____key
  mainImage___asset___source____type
  mainImage___asset___source___name
  mainImage___asset___source___id
  mainImage___asset___source___url
  mainImage___asset____rawMetadata
  mainImage___asset____rawSource
  mainImage___asset___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  mainImage___asset___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  mainImage___asset___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  mainImage___asset___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  mainImage___asset___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  mainImage___asset___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  mainImage___asset___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  mainImage___asset___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  mainImage___asset___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  mainImage___asset___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  mainImage___asset___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  mainImage___asset___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  mainImage___asset___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  mainImage___asset___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  mainImage___asset___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  mainImage___hotspot____key
  mainImage___hotspot____type
  mainImage___hotspot___x
  mainImage___hotspot___y
  mainImage___hotspot___height
  mainImage___hotspot___width
  mainImage___crop____key
  mainImage___crop____type
  mainImage___crop___top
  mainImage___crop___bottom
  mainImage___crop___left
  mainImage___crop___right
  mainImage___caption
  mainImage___alt
  mainImage____rawAsset
  mainImage____rawHotspot
  mainImage____rawCrop
  authors
  authors____key
  authors____type
  authors___author____id
  authors___author____type
  authors___author____createdAt
  authors___author____updatedAt
  authors___author____rev
  authors___author____key
  authors___author___name
  authors___author___slug____key
  authors___author___slug____type
  authors___author___slug___current
  authors___author___image____key
  authors___author___image____type
  authors___author___image___caption
  authors___author___image___alt
  authors___author___image____rawAsset
  authors___author___image____rawHotspot
  authors___author___image____rawCrop
  authors___author___bio
  authors___author___bio____key
  authors___author___bio____type
  authors___author___bio___children
  authors___author___bio___style
  authors___author___bio___list
  authors___author___bio____rawChildren
  authors___author____rawSlug
  authors___author____rawImage
  authors___author____rawBio
  authors___author___id
  authors___author___parent___id
  authors___author___parent___children
  authors___author___children
  authors___author___children___id
  authors___author___children___children
  authors___author___internal___content
  authors___author___internal___contentDigest
  authors___author___internal___description
  authors___author___internal___fieldOwners
  authors___author___internal___ignoreType
  authors___author___internal___mediaType
  authors___author___internal___owner
  authors___author___internal___type
  authors____rawAuthor
  categories
  categories____id
  categories____type
  categories____createdAt
  categories____updatedAt
  categories____rev
  categories____key
  categories___title
  categories___description
  categories___id
  categories___parent___id
  categories___parent___parent___id
  categories___parent___parent___children
  categories___parent___children
  categories___parent___children___id
  categories___parent___children___children
  categories___parent___internal___content
  categories___parent___internal___contentDigest
  categories___parent___internal___description
  categories___parent___internal___fieldOwners
  categories___parent___internal___ignoreType
  categories___parent___internal___mediaType
  categories___parent___internal___owner
  categories___parent___internal___type
  categories___children
  categories___children___id
  categories___children___parent___id
  categories___children___parent___children
  categories___children___children
  categories___children___children___id
  categories___children___children___children
  categories___children___internal___content
  categories___children___internal___contentDigest
  categories___children___internal___description
  categories___children___internal___fieldOwners
  categories___children___internal___ignoreType
  categories___children___internal___mediaType
  categories___children___internal___owner
  categories___children___internal___type
  categories___internal___content
  categories___internal___contentDigest
  categories___internal___description
  categories___internal___fieldOwners
  categories___internal___ignoreType
  categories___internal___mediaType
  categories___internal___owner
  categories___internal___type
  excerpt
  excerpt____key
  excerpt____type
  excerpt___children
  excerpt___children____key
  excerpt___children____type
  excerpt___children___marks
  excerpt___children___text
  excerpt___style
  excerpt___list
  excerpt____rawChildren
  body
  body____key
  body____type
  body___children
  body___children____key
  body___children____type
  body___children___marks
  body___children___text
  body___style
  body___list
  body____rawChildren
  _rawSlug
  _rawMainImage
  _rawExcerpt
  _rawAuthors
  _rawCategories
  _rawBody
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type SanityPostGroupConnection {
  totalCount: Int!
  edges: [SanityPostEdge!]!
  nodes: [SanityPost!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input SanityPostFilterInput {
  _id: StringQueryOperatorInput
  _type: StringQueryOperatorInput
  _createdAt: DateQueryOperatorInput
  _updatedAt: DateQueryOperatorInput
  _rev: StringQueryOperatorInput
  _key: StringQueryOperatorInput
  title: StringQueryOperatorInput
  slug: SanitySlugFilterInput
  publishedAt: DateQueryOperatorInput
  mainImage: SanityMainImageFilterInput
  authors: SanityAuthorReferenceFilterListInput
  categories: SanityCategoryFilterListInput
  excerpt: SanityBlockFilterListInput
  body: SanityBlockFilterListInput
  _rawSlug: JSONQueryOperatorInput
  _rawMainImage: JSONQueryOperatorInput
  _rawExcerpt: JSONQueryOperatorInput
  _rawAuthors: JSONQueryOperatorInput
  _rawCategories: JSONQueryOperatorInput
  _rawBody: JSONQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input SanityPostSortInput {
  fields: [SanityPostFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type SanityFileAssetConnection {
  totalCount: Int!
  edges: [SanityFileAssetEdge!]!
  nodes: [SanityFileAsset!]!
  pageInfo: PageInfo!
  distinct(field: SanityFileAssetFieldsEnum!): [String!]!
  max(field: SanityFileAssetFieldsEnum!): Float
  min(field: SanityFileAssetFieldsEnum!): Float
  sum(field: SanityFileAssetFieldsEnum!): Float
  group(skip: Int, limit: Int, field: SanityFileAssetFieldsEnum!): [SanityFileAssetGroupConnection!]!
}

type SanityFileAssetEdge {
  next: SanityFileAsset
  node: SanityFileAsset!
  previous: SanityFileAsset
}

enum SanityFileAssetFieldsEnum {
  _id
  _type
  _createdAt
  _updatedAt
  _rev
  _key
  originalFilename
  label
  title
  description
  altText
  sha1hash
  extension
  mimeType
  size
  assetId
  path
  url
  source____key
  source____type
  source___name
  source___id
  source___url
  _rawSource
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type SanityFileAssetGroupConnection {
  totalCount: Int!
  edges: [SanityFileAssetEdge!]!
  nodes: [SanityFileAsset!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input SanityFileAssetFilterInput {
  _id: StringQueryOperatorInput
  _type: StringQueryOperatorInput
  _createdAt: DateQueryOperatorInput
  _updatedAt: DateQueryOperatorInput
  _rev: StringQueryOperatorInput
  _key: StringQueryOperatorInput
  originalFilename: StringQueryOperatorInput
  label: StringQueryOperatorInput
  title: StringQueryOperatorInput
  description: StringQueryOperatorInput
  altText: StringQueryOperatorInput
  sha1hash: StringQueryOperatorInput
  extension: StringQueryOperatorInput
  mimeType: StringQueryOperatorInput
  size: FloatQueryOperatorInput
  assetId: StringQueryOperatorInput
  path: StringQueryOperatorInput
  url: StringQueryOperatorInput
  source: SanityAssetSourceDataFilterInput
  _rawSource: JSONQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input SanityFileAssetSortInput {
  fields: [SanityFileAssetFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type SanityImageAssetConnection {
  totalCount: Int!
  edges: [SanityImageAssetEdge!]!
  nodes: [SanityImageAsset!]!
  pageInfo: PageInfo!
  distinct(field: SanityImageAssetFieldsEnum!): [String!]!
  max(field: SanityImageAssetFieldsEnum!): Float
  min(field: SanityImageAssetFieldsEnum!): Float
  sum(field: SanityImageAssetFieldsEnum!): Float
  group(skip: Int, limit: Int, field: SanityImageAssetFieldsEnum!): [SanityImageAssetGroupConnection!]!
}

type SanityImageAssetEdge {
  next: SanityImageAsset
  node: SanityImageAsset!
  previous: SanityImageAsset
}

enum SanityImageAssetFieldsEnum {
  _id
  _type
  _createdAt
  _updatedAt
  _rev
  _key
  originalFilename
  label
  title
  description
  altText
  sha1hash
  extension
  mimeType
  size
  assetId
  path
  url
  metadata____key
  metadata____type
  metadata___location____key
  metadata___location____type
  metadata___location___lat
  metadata___location___lng
  metadata___location___alt
  metadata___dimensions____key
  metadata___dimensions____type
  metadata___dimensions___height
  metadata___dimensions___width
  metadata___dimensions___aspectRatio
  metadata___palette____key
  metadata___palette____type
  metadata___palette___darkMuted____key
  metadata___palette___darkMuted____type
  metadata___palette___darkMuted___background
  metadata___palette___darkMuted___foreground
  metadata___palette___darkMuted___population
  metadata___palette___darkMuted___title
  metadata___palette___lightVibrant____key
  metadata___palette___lightVibrant____type
  metadata___palette___lightVibrant___background
  metadata___palette___lightVibrant___foreground
  metadata___palette___lightVibrant___population
  metadata___palette___lightVibrant___title
  metadata___palette___darkVibrant____key
  metadata___palette___darkVibrant____type
  metadata___palette___darkVibrant___background
  metadata___palette___darkVibrant___foreground
  metadata___palette___darkVibrant___population
  metadata___palette___darkVibrant___title
  metadata___palette___vibrant____key
  metadata___palette___vibrant____type
  metadata___palette___vibrant___background
  metadata___palette___vibrant___foreground
  metadata___palette___vibrant___population
  metadata___palette___vibrant___title
  metadata___palette___dominant____key
  metadata___palette___dominant____type
  metadata___palette___dominant___background
  metadata___palette___dominant___foreground
  metadata___palette___dominant___population
  metadata___palette___dominant___title
  metadata___palette___lightMuted____key
  metadata___palette___lightMuted____type
  metadata___palette___lightMuted___background
  metadata___palette___lightMuted___foreground
  metadata___palette___lightMuted___population
  metadata___palette___lightMuted___title
  metadata___palette___muted____key
  metadata___palette___muted____type
  metadata___palette___muted___background
  metadata___palette___muted___foreground
  metadata___palette___muted___population
  metadata___palette___muted___title
  metadata___palette____rawDarkMuted
  metadata___palette____rawLightVibrant
  metadata___palette____rawDarkVibrant
  metadata___palette____rawVibrant
  metadata___palette____rawDominant
  metadata___palette____rawLightMuted
  metadata___palette____rawMuted
  metadata___lqip
  metadata___hasAlpha
  metadata___isOpaque
  metadata____rawLocation
  metadata____rawDimensions
  metadata____rawPalette
  source____key
  source____type
  source___name
  source___id
  source___url
  _rawMetadata
  _rawSource
  gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
}

type SanityImageAssetGroupConnection {
  totalCount: Int!
  edges: [SanityImageAssetEdge!]!
  nodes: [SanityImageAsset!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input SanityImageAssetSortInput {
  fields: [SanityImageAssetFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type SanitySiteSettingsConnection {
  totalCount: Int!
  edges: [SanitySiteSettingsEdge!]!
  nodes: [SanitySiteSettings!]!
  pageInfo: PageInfo!
  distinct(field: SanitySiteSettingsFieldsEnum!): [String!]!
  max(field: SanitySiteSettingsFieldsEnum!): Float
  min(field: SanitySiteSettingsFieldsEnum!): Float
  sum(field: SanitySiteSettingsFieldsEnum!): Float
  group(skip: Int, limit: Int, field: SanitySiteSettingsFieldsEnum!): [SanitySiteSettingsGroupConnection!]!
}

type SanitySiteSettingsEdge {
  next: SanitySiteSettings
  node: SanitySiteSettings!
  previous: SanitySiteSettings
}

enum SanitySiteSettingsFieldsEnum {
  _id
  _type
  _createdAt
  _updatedAt
  _rev
  _key
  title
  description
  keywords
  author____id
  author____type
  author____createdAt
  author____updatedAt
  author____rev
  author____key
  author___name
  author___slug____key
  author___slug____type
  author___slug___current
  author___image____key
  author___image____type
  author___image___asset____id
  author___image___asset____type
  author___image___asset____createdAt
  author___image___asset____updatedAt
  author___image___asset____rev
  author___image___asset____key
  author___image___asset___originalFilename
  author___image___asset___label
  author___image___asset___title
  author___image___asset___description
  author___image___asset___altText
  author___image___asset___sha1hash
  author___image___asset___extension
  author___image___asset___mimeType
  author___image___asset___size
  author___image___asset___assetId
  author___image___asset___path
  author___image___asset___url
  author___image___asset____rawMetadata
  author___image___asset____rawSource
  author___image___asset___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  author___image___asset___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  author___image___asset___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  author___image___hotspot____key
  author___image___hotspot____type
  author___image___hotspot___x
  author___image___hotspot___y
  author___image___hotspot___height
  author___image___hotspot___width
  author___image___crop____key
  author___image___crop____type
  author___image___crop___top
  author___image___crop___bottom
  author___image___crop___left
  author___image___crop___right
  author___image___caption
  author___image___alt
  author___image____rawAsset
  author___image____rawHotspot
  author___image____rawCrop
  author___bio
  author___bio____key
  author___bio____type
  author___bio___children
  author___bio___children____key
  author___bio___children____type
  author___bio___children___marks
  author___bio___children___text
  author___bio___style
  author___bio___list
  author___bio____rawChildren
  author____rawSlug
  author____rawImage
  author____rawBio
  author___id
  author___parent___id
  author___parent___parent___id
  author___parent___parent___children
  author___parent___children
  author___parent___children___id
  author___parent___children___children
  author___parent___internal___content
  author___parent___internal___contentDigest
  author___parent___internal___description
  author___parent___internal___fieldOwners
  author___parent___internal___ignoreType
  author___parent___internal___mediaType
  author___parent___internal___owner
  author___parent___internal___type
  author___children
  author___children___id
  author___children___parent___id
  author___children___parent___children
  author___children___children
  author___children___children___id
  author___children___children___children
  author___children___internal___content
  author___children___internal___contentDigest
  author___children___internal___description
  author___children___internal___fieldOwners
  author___children___internal___ignoreType
  author___children___internal___mediaType
  author___children___internal___owner
  author___children___internal___type
  author___internal___content
  author___internal___contentDigest
  author___internal___description
  author___internal___fieldOwners
  author___internal___ignoreType
  author___internal___mediaType
  author___internal___owner
  author___internal___type
  _rawAuthor
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type SanitySiteSettingsGroupConnection {
  totalCount: Int!
  edges: [SanitySiteSettingsEdge!]!
  nodes: [SanitySiteSettings!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input SanitySiteSettingsFilterInput {
  _id: StringQueryOperatorInput
  _type: StringQueryOperatorInput
  _createdAt: DateQueryOperatorInput
  _updatedAt: DateQueryOperatorInput
  _rev: StringQueryOperatorInput
  _key: StringQueryOperatorInput
  title: StringQueryOperatorInput
  description: StringQueryOperatorInput
  keywords: StringQueryOperatorInput
  author: SanityAuthorFilterInput
  _rawAuthor: JSONQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input SanitySiteSettingsSortInput {
  fields: [SanitySiteSettingsFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type ThemeUiConfigConnection {
  totalCount: Int!
  edges: [ThemeUiConfigEdge!]!
  nodes: [ThemeUiConfig!]!
  pageInfo: PageInfo!
  distinct(field: ThemeUiConfigFieldsEnum!): [String!]!
  max(field: ThemeUiConfigFieldsEnum!): Float
  min(field: ThemeUiConfigFieldsEnum!): Float
  sum(field: ThemeUiConfigFieldsEnum!): Float
  group(skip: Int, limit: Int, field: ThemeUiConfigFieldsEnum!): [ThemeUiConfigGroupConnection!]!
}

type ThemeUiConfigEdge {
  next: ThemeUiConfig
  node: ThemeUiConfig!
  previous: ThemeUiConfig
}

enum ThemeUiConfigFieldsEnum {
  preset
  prismPreset
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type ThemeUiConfigGroupConnection {
  totalCount: Int!
  edges: [ThemeUiConfigEdge!]!
  nodes: [ThemeUiConfig!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input ThemeUiConfigFilterInput {
  preset: JSONQueryOperatorInput
  prismPreset: JSONQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input ThemeUiConfigSortInput {
  fields: [ThemeUiConfigFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type ImageSharpConnection {
  totalCount: Int!
  edges: [ImageSharpEdge!]!
  nodes: [ImageSharp!]!
  pageInfo: PageInfo!
  distinct(field: ImageSharpFieldsEnum!): [String!]!
  max(field: ImageSharpFieldsEnum!): Float
  min(field: ImageSharpFieldsEnum!): Float
  sum(field: ImageSharpFieldsEnum!): Float
  group(skip: Int, limit: Int, field: ImageSharpFieldsEnum!): [ImageSharpGroupConnection!]!
}

type ImageSharpEdge {
  next: ImageSharp
  node: ImageSharp!
  previous: ImageSharp
}

enum ImageSharpFieldsEnum {
  fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___originalImg @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___presentationWidth @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___presentationHeight @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  original___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  original___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  original___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
}

type ImageSharpGroupConnection {
  totalCount: Int!
  edges: [ImageSharpEdge!]!
  nodes: [ImageSharp!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input ImageSharpSortInput {
  fields: [ImageSharpFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type SitePluginConnection {
  totalCount: Int!
  edges: [SitePluginEdge!]!
  nodes: [SitePlugin!]!
  pageInfo: PageInfo!
  distinct(field: SitePluginFieldsEnum!): [String!]!
  max(field: SitePluginFieldsEnum!): Float
  min(field: SitePluginFieldsEnum!): Float
  sum(field: SitePluginFieldsEnum!): Float
  group(skip: Int, limit: Int, field: SitePluginFieldsEnum!): [SitePluginGroupConnection!]!
}

type SitePluginEdge {
  next: SitePlugin
  node: SitePlugin!
  previous: SitePlugin
}

enum SitePluginFieldsEnum {
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  resolve
  name
  version
  pluginOptions___dataset
  pluginOptions___projectId
  pluginOptions___token
  pluginOptions___watchMode
  pluginOptions___overlayDrafts
  pluginOptions___isTSX
  pluginOptions___jsxPragma
  pluginOptions___allExtensions
  pluginOptions___src
  pluginOptions___generated
  pluginOptions___types
  pluginOptions___api
  pluginOptions___components
  pluginOptions___containers
  pluginOptions___gatsby
  pluginOptions___hooks
  pluginOptions___layouts
  pluginOptions___lib
  pluginOptions___pages
  pluginOptions___styles
  pluginOptions___templates
  pluginOptions___preset___space
  pluginOptions___preset___fonts___body
  pluginOptions___preset___fonts___heading
  pluginOptions___preset___fonts___monospace
  pluginOptions___preset___fontSizes
  pluginOptions___preset___fontWeights___body
  pluginOptions___preset___fontWeights___heading
  pluginOptions___preset___fontWeights___bold
  pluginOptions___preset___lineHeights___body
  pluginOptions___preset___lineHeights___heading
  pluginOptions___preset___colors___text
  pluginOptions___preset___colors___background
  pluginOptions___preset___colors___primary
  pluginOptions___preset___colors___secondary
  pluginOptions___preset___colors___muted
  pluginOptions___defaults___formats
  pluginOptions___defaults___placeholder
  pluginOptions___defaults___quality
  pluginOptions___defaults___breakpoints
  pluginOptions___defaults___backgroundColor
  pluginOptions___base64Width
  pluginOptions___stripMetadata
  pluginOptions___defaultQuality
  pluginOptions___failOnError
  pluginOptions___siteUrl
  pluginOptions___stripQueryString
  pluginOptions___outputPath
  pluginOptions___emitSchema____xgeneratedxxxgatsbyxschemaxgraphql
  pluginOptions___emitSchema____xgeneratedxxxgatsbyxintrospectionxjson
  pluginOptions___emitPluginDocuments____xgeneratedxxxgatsbyxpluginxdocumentsxgraphql
  pluginOptions___path
  pluginOptions___pathCheck
  nodeAPIs
  browserAPIs
  ssrAPIs
  pluginFilepath
  packageJson___name
  packageJson___description
  packageJson___version
  packageJson___main
  packageJson___license
  packageJson___dependencies
  packageJson___dependencies___name
  packageJson___dependencies___version
  packageJson___devDependencies
  packageJson___devDependencies___name
  packageJson___devDependencies___version
  packageJson___peerDependencies
  packageJson___peerDependencies___name
  packageJson___peerDependencies___version
  packageJson___keywords
}

type SitePluginGroupConnection {
  totalCount: Int!
  edges: [SitePluginEdge!]!
  nodes: [SitePlugin!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input SitePluginSortInput {
  fields: [SitePluginFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type SiteBuildMetadataConnection {
  totalCount: Int!
  edges: [SiteBuildMetadataEdge!]!
  nodes: [SiteBuildMetadata!]!
  pageInfo: PageInfo!
  distinct(field: SiteBuildMetadataFieldsEnum!): [String!]!
  max(field: SiteBuildMetadataFieldsEnum!): Float
  min(field: SiteBuildMetadataFieldsEnum!): Float
  sum(field: SiteBuildMetadataFieldsEnum!): Float
  group(skip: Int, limit: Int, field: SiteBuildMetadataFieldsEnum!): [SiteBuildMetadataGroupConnection!]!
}

type SiteBuildMetadataEdge {
  next: SiteBuildMetadata
  node: SiteBuildMetadata!
  previous: SiteBuildMetadata
}

enum SiteBuildMetadataFieldsEnum {
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  buildTime
}

type SiteBuildMetadataGroupConnection {
  totalCount: Int!
  edges: [SiteBuildMetadataEdge!]!
  nodes: [SiteBuildMetadata!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input SiteBuildMetadataFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
  buildTime: DateQueryOperatorInput
}

input SiteBuildMetadataSortInput {
  fields: [SiteBuildMetadataFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}
